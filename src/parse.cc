// Generated by Bisonc++ V4.05.00 on Mon, 23 Mar 2015 03:42:28 +0000

// $insert class.ih
#include "Parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token__ is _UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token__ in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on _error_
// which is applied. In this _error_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
// Last element:    {set to d_token__,    action to perform}
//      }

// When the --thread-safe option is specified, all static data are defined as
// const. If --thread-safe is not provided, the state-tables are not defined
// as const, since the lookup() function below will modify them


namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum 
    {
        STACK_EXPANSION = 5     // size to expand the state-stack with when
                                // full
    };

    enum ReservedTokens
    {
        PARSE_ACCEPT     = 0,   // `ACCEPT' TRANSITION
        _UNDETERMINED_   = -2,
        _EOF_            = -1,
        _error_          = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            int d_type;
            int d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
            size_t d_errorState;    // used with Error states
        };
    };

    // $insert staticdata
    
// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {330, 1}, // 1: primary_expression (IDENTIFIER) ->  IDENTIFIER
     {330, 1}, // 2: primary_expression ->  constant
     {330, 1}, // 3: primary_expression ->  string
     {330, 3}, // 4: primary_expression ('(') ->  '(' expression ')'
     {330, 1}, // 5: primary_expression ->  generic_selection
     {331, 1}, // 6: constant (I_CONSTANT) ->  I_CONSTANT
     {331, 1}, // 7: constant (F_CONSTANT) ->  F_CONSTANT
     {331, 1}, // 8: constant (ENUMERATION_CONSTANT) ->  ENUMERATION_CONSTANT
     {335, 1}, // 9: enumeration_constant (IDENTIFIER) ->  IDENTIFIER
     {332, 1}, // 10: string (STRING_LITERAL) ->  STRING_LITERAL
     {334, 6}, // 11: generic_selection (GENERIC) ->  GENERIC '(' assignment_expression ',' generic_assoc_list ')'
     {337, 1}, // 12: generic_assoc_list ->  generic_association
     {337, 3}, // 13: generic_assoc_list (',') ->  generic_assoc_list ',' generic_association
     {338, 3}, // 14: generic_association (':') ->  type_name ':' assignment_expression
     {338, 3}, // 15: generic_association (DEFAULT) ->  DEFAULT ':' assignment_expression
     {340, 1}, // 16: postfix_expression ->  primary_expression
     {340, 4}, // 17: postfix_expression ('[') ->  postfix_expression '[' expression ']'
     {340, 3}, // 18: postfix_expression ('(') ->  postfix_expression '(' ')'
     {340, 4}, // 19: postfix_expression ('(') ->  postfix_expression '(' argument_expression_list ')'
     {340, 3}, // 20: postfix_expression ('.') ->  postfix_expression '.' IDENTIFIER
     {340, 3}, // 21: postfix_expression (PTR_OP) ->  postfix_expression PTR_OP IDENTIFIER
     {340, 2}, // 22: postfix_expression (INC_OP) ->  postfix_expression INC_OP
     {340, 2}, // 23: postfix_expression (DEC_OP) ->  postfix_expression DEC_OP
     {340, 6}, // 24: postfix_expression ('(') ->  '(' type_name ')' '{' initializer_list '}'
     {340, 7}, // 25: postfix_expression ('(') ->  '(' type_name ')' '{' initializer_list ',' '}'
     {341, 1}, // 26: argument_expression_list ->  assignment_expression
     {341, 3}, // 27: argument_expression_list (',') ->  argument_expression_list ',' assignment_expression
     {343, 1}, // 28: unary_expression ->  postfix_expression
     {343, 2}, // 29: unary_expression (INC_OP) ->  INC_OP unary_expression
     {343, 2}, // 30: unary_expression (DEC_OP) ->  DEC_OP unary_expression
     {343, 2}, // 31: unary_expression ->  unary_operator cast_expression
     {343, 2}, // 32: unary_expression (SIZEOF) ->  SIZEOF unary_expression
     {343, 4}, // 33: unary_expression (SIZEOF) ->  SIZEOF '(' type_name ')'
     {343, 4}, // 34: unary_expression (ALIGNOF) ->  ALIGNOF '(' type_name ')'
     {344, 1}, // 35: unary_operator ('&') ->  '&'
     {344, 1}, // 36: unary_operator ('*') ->  '*'
     {344, 1}, // 37: unary_operator ('+') ->  '+'
     {344, 1}, // 38: unary_operator ('-') ->  '-'
     {344, 1}, // 39: unary_operator ('~') ->  '~'
     {344, 1}, // 40: unary_operator ('!') ->  '!'
     {345, 1}, // 41: cast_expression ->  unary_expression
     {345, 4}, // 42: cast_expression ('(') ->  '(' type_name ')' cast_expression
     {346, 1}, // 43: multiplicative_expression ->  cast_expression
     {346, 3}, // 44: multiplicative_expression ('*') ->  multiplicative_expression '*' cast_expression
     {346, 3}, // 45: multiplicative_expression ('/') ->  multiplicative_expression '/' cast_expression
     {346, 3}, // 46: multiplicative_expression ('%') ->  multiplicative_expression '%' cast_expression
     {347, 1}, // 47: additive_expression ->  multiplicative_expression
     {347, 3}, // 48: additive_expression ('+') ->  additive_expression '+' multiplicative_expression
     {347, 3}, // 49: additive_expression ('-') ->  additive_expression '-' multiplicative_expression
     {348, 1}, // 50: shift_expression ->  additive_expression
     {348, 3}, // 51: shift_expression (LEFT_OP) ->  shift_expression LEFT_OP additive_expression
     {348, 3}, // 52: shift_expression (RIGHT_OP) ->  shift_expression RIGHT_OP additive_expression
     {349, 1}, // 53: relational_expression ->  shift_expression
     {349, 3}, // 54: relational_expression ('<') ->  relational_expression '<' shift_expression
     {349, 3}, // 55: relational_expression ('>') ->  relational_expression '>' shift_expression
     {349, 3}, // 56: relational_expression (LE_OP) ->  relational_expression LE_OP shift_expression
     {349, 3}, // 57: relational_expression (GE_OP) ->  relational_expression GE_OP shift_expression
     {350, 1}, // 58: equality_expression ->  relational_expression
     {350, 3}, // 59: equality_expression (EQ_OP) ->  equality_expression EQ_OP relational_expression
     {350, 3}, // 60: equality_expression (NE_OP) ->  equality_expression NE_OP relational_expression
     {351, 1}, // 61: and_expression ->  equality_expression
     {351, 3}, // 62: and_expression ('&') ->  and_expression '&' equality_expression
     {352, 1}, // 63: exclusive_or_expression ->  and_expression
     {352, 3}, // 64: exclusive_or_expression ('^') ->  exclusive_or_expression '^' and_expression
     {353, 1}, // 65: inclusive_or_expression ->  exclusive_or_expression
     {353, 3}, // 66: inclusive_or_expression ('|') ->  inclusive_or_expression '|' exclusive_or_expression
     {354, 1}, // 67: logical_and_expression ->  inclusive_or_expression
     {354, 3}, // 68: logical_and_expression (AND_OP) ->  logical_and_expression AND_OP inclusive_or_expression
     {355, 1}, // 69: logical_or_expression ->  logical_and_expression
     {355, 3}, // 70: logical_or_expression (OR_OP) ->  logical_or_expression OR_OP logical_and_expression
     {356, 1}, // 71: conditional_expression ->  logical_or_expression
     {356, 5}, // 72: conditional_expression ('?') ->  logical_or_expression '?' expression ':' conditional_expression
     {336, 1}, // 73: assignment_expression ->  conditional_expression
     {336, 3}, // 74: assignment_expression ->  unary_expression assignment_operator assignment_expression
     {357, 1}, // 75: assignment_operator ('=') ->  '='
     {357, 1}, // 76: assignment_operator (MUL_ASSIGN) ->  MUL_ASSIGN
     {357, 1}, // 77: assignment_operator (DIV_ASSIGN) ->  DIV_ASSIGN
     {357, 1}, // 78: assignment_operator (MOD_ASSIGN) ->  MOD_ASSIGN
     {357, 1}, // 79: assignment_operator (ADD_ASSIGN) ->  ADD_ASSIGN
     {357, 1}, // 80: assignment_operator (SUB_ASSIGN) ->  SUB_ASSIGN
     {357, 1}, // 81: assignment_operator (LEFT_ASSIGN) ->  LEFT_ASSIGN
     {357, 1}, // 82: assignment_operator (RIGHT_ASSIGN) ->  RIGHT_ASSIGN
     {357, 1}, // 83: assignment_operator (AND_ASSIGN) ->  AND_ASSIGN
     {357, 1}, // 84: assignment_operator (XOR_ASSIGN) ->  XOR_ASSIGN
     {357, 1}, // 85: assignment_operator (OR_ASSIGN) ->  OR_ASSIGN
     {333, 1}, // 86: expression ->  assignment_expression
     {333, 3}, // 87: expression (',') ->  expression ',' assignment_expression
     {358, 1}, // 88: constant_expression ->  conditional_expression
     {359, 2}, // 89: declaration (';') ->  declaration_specifiers ';'
     {359, 3}, // 90: declaration (';') ->  declaration_specifiers init_declarator_list ';'
     {359, 1}, // 91: declaration ->  static_assert_declaration
     {360, 2}, // 92: declaration_specifiers ->  storage_class_specifier declaration_specifiers
     {360, 1}, // 93: declaration_specifiers ->  storage_class_specifier
     {360, 2}, // 94: declaration_specifiers ->  type_specifier declaration_specifiers
     {360, 1}, // 95: declaration_specifiers ->  type_specifier
     {360, 2}, // 96: declaration_specifiers ->  type_qualifier declaration_specifiers
     {360, 1}, // 97: declaration_specifiers ->  type_qualifier
     {360, 2}, // 98: declaration_specifiers ->  function_specifier declaration_specifiers
     {360, 1}, // 99: declaration_specifiers ->  function_specifier
     {360, 2}, // 100: declaration_specifiers ->  alignment_specifier declaration_specifiers
     {360, 1}, // 101: declaration_specifiers ->  alignment_specifier
     {361, 1}, // 102: init_declarator_list ->  init_declarator
     {361, 3}, // 103: init_declarator_list (',') ->  init_declarator_list ',' init_declarator
     {368, 3}, // 104: init_declarator ('=') ->  declarator '=' initializer
     {368, 1}, // 105: init_declarator ->  declarator
     {363, 1}, // 106: storage_class_specifier (TYPEDEF) ->  TYPEDEF
     {363, 1}, // 107: storage_class_specifier (EXTERN) ->  EXTERN
     {363, 1}, // 108: storage_class_specifier (STATIC) ->  STATIC
     {363, 1}, // 109: storage_class_specifier (THREAD_LOCAL) ->  THREAD_LOCAL
     {363, 1}, // 110: storage_class_specifier (AUTO) ->  AUTO
     {363, 1}, // 111: storage_class_specifier (REGISTER) ->  REGISTER
     {364, 1}, // 112: type_specifier (VOID) ->  VOID
     {364, 1}, // 113: type_specifier (CHAR) ->  CHAR
     {364, 1}, // 114: type_specifier (SHORT) ->  SHORT
     {364, 1}, // 115: type_specifier (INT) ->  INT
     {364, 1}, // 116: type_specifier (LONG) ->  LONG
     {364, 1}, // 117: type_specifier (FLOAT) ->  FLOAT
     {364, 1}, // 118: type_specifier (DOUBLE) ->  DOUBLE
     {364, 1}, // 119: type_specifier (SIGNED) ->  SIGNED
     {364, 1}, // 120: type_specifier (UNSIGNED) ->  UNSIGNED
     {364, 1}, // 121: type_specifier (BOOL) ->  BOOL
     {364, 1}, // 122: type_specifier (COMPLEX) ->  COMPLEX
     {364, 1}, // 123: type_specifier (IMAGINARY) ->  IMAGINARY
     {364, 1}, // 124: type_specifier ->  atomic_type_specifier
     {364, 1}, // 125: type_specifier ->  struct_or_union_specifier
     {364, 1}, // 126: type_specifier ->  enum_specifier
     {364, 1}, // 127: type_specifier (TYPEDEF_NAME) ->  TYPEDEF_NAME
     {372, 4}, // 128: struct_or_union_specifier ('{') ->  struct_or_union '{' struct_declaration_list '}'
     {372, 5}, // 129: struct_or_union_specifier (IDENTIFIER) ->  struct_or_union IDENTIFIER '{' struct_declaration_list '}'
     {372, 2}, // 130: struct_or_union_specifier (IDENTIFIER) ->  struct_or_union IDENTIFIER
     {374, 1}, // 131: struct_or_union (STRUCT) ->  STRUCT
     {374, 1}, // 132: struct_or_union (UNION) ->  UNION
     {375, 1}, // 133: struct_declaration_list ->  struct_declaration
     {375, 2}, // 134: struct_declaration_list ->  struct_declaration_list struct_declaration
     {376, 2}, // 135: struct_declaration (';') ->  specifier_qualifier_list ';'
     {376, 3}, // 136: struct_declaration (';') ->  specifier_qualifier_list struct_declarator_list ';'
     {376, 1}, // 137: struct_declaration ->  static_assert_declaration
     {377, 2}, // 138: specifier_qualifier_list ->  type_specifier specifier_qualifier_list
     {377, 1}, // 139: specifier_qualifier_list ->  type_specifier
     {377, 2}, // 140: specifier_qualifier_list ->  type_qualifier specifier_qualifier_list
     {377, 1}, // 141: specifier_qualifier_list ->  type_qualifier
     {378, 1}, // 142: struct_declarator_list ->  struct_declarator
     {378, 3}, // 143: struct_declarator_list (',') ->  struct_declarator_list ',' struct_declarator
     {379, 2}, // 144: struct_declarator (':') ->  ':' constant_expression
     {379, 3}, // 145: struct_declarator (':') ->  declarator ':' constant_expression
     {379, 1}, // 146: struct_declarator ->  declarator
     {373, 4}, // 147: enum_specifier (ENUM) ->  ENUM '{' enumerator_list '}'
     {373, 5}, // 148: enum_specifier (ENUM) ->  ENUM '{' enumerator_list ',' '}'
     {373, 5}, // 149: enum_specifier (ENUM) ->  ENUM IDENTIFIER '{' enumerator_list '}'
     {373, 6}, // 150: enum_specifier (ENUM) ->  ENUM IDENTIFIER '{' enumerator_list ',' '}'
     {373, 2}, // 151: enum_specifier (ENUM) ->  ENUM IDENTIFIER
     {380, 1}, // 152: enumerator_list ->  enumerator
     {380, 3}, // 153: enumerator_list (',') ->  enumerator_list ',' enumerator
     {381, 3}, // 154: enumerator ('=') ->  enumeration_constant '=' constant_expression
     {381, 1}, // 155: enumerator ->  enumeration_constant
     {371, 4}, // 156: atomic_type_specifier (ATOMIC) ->  ATOMIC '(' type_name ')'
     {365, 1}, // 157: type_qualifier (CONST) ->  CONST
     {365, 1}, // 158: type_qualifier (RESTRICT) ->  RESTRICT
     {365, 1}, // 159: type_qualifier (VOLATILE) ->  VOLATILE
     {365, 1}, // 160: type_qualifier (ATOMIC) ->  ATOMIC
     {366, 1}, // 161: function_specifier (INLINE) ->  INLINE
     {366, 1}, // 162: function_specifier (NORETURN) ->  NORETURN
     {367, 4}, // 163: alignment_specifier (ALIGNAS) ->  ALIGNAS '(' type_name ')'
     {367, 4}, // 164: alignment_specifier (ALIGNAS) ->  ALIGNAS '(' constant_expression ')'
     {369, 2}, // 165: declarator ->  pointer direct_declarator
     {369, 1}, // 166: declarator ->  direct_declarator
     {383, 1}, // 167: direct_declarator (IDENTIFIER) ->  IDENTIFIER
     {383, 3}, // 168: direct_declarator ('(') ->  '(' declarator ')'
     {383, 3}, // 169: direct_declarator ('[') ->  direct_declarator '[' ']'
     {383, 4}, // 170: direct_declarator ('[') ->  direct_declarator '[' '*' ']'
     {383, 6}, // 171: direct_declarator ('[') ->  direct_declarator '[' STATIC type_qualifier_list assignment_expression ']'
     {383, 5}, // 172: direct_declarator ('[') ->  direct_declarator '[' STATIC assignment_expression ']'
     {383, 5}, // 173: direct_declarator ('[') ->  direct_declarator '[' type_qualifier_list '*' ']'
     {383, 6}, // 174: direct_declarator ('[') ->  direct_declarator '[' type_qualifier_list STATIC assignment_expression ']'
     {383, 5}, // 175: direct_declarator ('[') ->  direct_declarator '[' type_qualifier_list assignment_expression ']'
     {383, 4}, // 176: direct_declarator ('[') ->  direct_declarator '[' type_qualifier_list ']'
     {383, 4}, // 177: direct_declarator ('[') ->  direct_declarator '[' assignment_expression ']'
     {383, 4}, // 178: direct_declarator ('(') ->  direct_declarator '(' parameter_type_list ')'
     {383, 3}, // 179: direct_declarator ('(') ->  direct_declarator '(' ')'
     {383, 4}, // 180: direct_declarator ('(') ->  direct_declarator '(' identifier_list ')'
     {382, 3}, // 181: pointer ('*') ->  '*' type_qualifier_list pointer
     {382, 2}, // 182: pointer ('*') ->  '*' type_qualifier_list
     {382, 2}, // 183: pointer ('*') ->  '*' pointer
     {382, 1}, // 184: pointer ('*') ->  '*'
     {384, 1}, // 185: type_qualifier_list ->  type_qualifier
     {384, 2}, // 186: type_qualifier_list ->  type_qualifier_list type_qualifier
     {385, 3}, // 187: parameter_type_list (',') ->  parameter_list ',' ELLIPSIS
     {385, 1}, // 188: parameter_type_list ->  parameter_list
     {387, 1}, // 189: parameter_list ->  parameter_declaration
     {387, 3}, // 190: parameter_list (',') ->  parameter_list ',' parameter_declaration
     {388, 2}, // 191: parameter_declaration ->  declaration_specifiers declarator
     {388, 2}, // 192: parameter_declaration ->  declaration_specifiers abstract_declarator
     {388, 1}, // 193: parameter_declaration ->  declaration_specifiers
     {386, 1}, // 194: identifier_list (IDENTIFIER) ->  IDENTIFIER
     {386, 3}, // 195: identifier_list (',') ->  identifier_list ',' IDENTIFIER
     {339, 2}, // 196: type_name ->  specifier_qualifier_list abstract_declarator
     {339, 1}, // 197: type_name ->  specifier_qualifier_list
     {389, 2}, // 198: abstract_declarator ->  pointer direct_abstract_declarator
     {389, 1}, // 199: abstract_declarator ->  pointer
     {389, 1}, // 200: abstract_declarator ->  direct_abstract_declarator
     {390, 3}, // 201: direct_abstract_declarator ('(') ->  '(' abstract_declarator ')'
     {390, 2}, // 202: direct_abstract_declarator ('[') ->  '[' ']'
     {390, 3}, // 203: direct_abstract_declarator ('[') ->  '[' '*' ']'
     {390, 5}, // 204: direct_abstract_declarator ('[') ->  '[' STATIC type_qualifier_list assignment_expression ']'
     {390, 4}, // 205: direct_abstract_declarator ('[') ->  '[' STATIC assignment_expression ']'
     {390, 5}, // 206: direct_abstract_declarator ('[') ->  '[' type_qualifier_list STATIC assignment_expression ']'
     {390, 4}, // 207: direct_abstract_declarator ('[') ->  '[' type_qualifier_list assignment_expression ']'
     {390, 3}, // 208: direct_abstract_declarator ('[') ->  '[' type_qualifier_list ']'
     {390, 3}, // 209: direct_abstract_declarator ('[') ->  '[' assignment_expression ']'
     {390, 3}, // 210: direct_abstract_declarator ('[') ->  direct_abstract_declarator '[' ']'
     {390, 4}, // 211: direct_abstract_declarator ('[') ->  direct_abstract_declarator '[' '*' ']'
     {390, 6}, // 212: direct_abstract_declarator ('[') ->  direct_abstract_declarator '[' STATIC type_qualifier_list assignment_expression ']'
     {390, 5}, // 213: direct_abstract_declarator ('[') ->  direct_abstract_declarator '[' STATIC assignment_expression ']'
     {390, 5}, // 214: direct_abstract_declarator ('[') ->  direct_abstract_declarator '[' type_qualifier_list assignment_expression ']'
     {390, 6}, // 215: direct_abstract_declarator ('[') ->  direct_abstract_declarator '[' type_qualifier_list STATIC assignment_expression ']'
     {390, 4}, // 216: direct_abstract_declarator ('[') ->  direct_abstract_declarator '[' type_qualifier_list ']'
     {390, 4}, // 217: direct_abstract_declarator ('[') ->  direct_abstract_declarator '[' assignment_expression ']'
     {390, 2}, // 218: direct_abstract_declarator ('(') ->  '(' ')'
     {390, 3}, // 219: direct_abstract_declarator ('(') ->  '(' parameter_type_list ')'
     {390, 3}, // 220: direct_abstract_declarator ('(') ->  direct_abstract_declarator '(' ')'
     {390, 4}, // 221: direct_abstract_declarator ('(') ->  direct_abstract_declarator '(' parameter_type_list ')'
     {370, 3}, // 222: initializer ('{') ->  '{' initializer_list '}'
     {370, 4}, // 223: initializer ('{') ->  '{' initializer_list ',' '}'
     {370, 1}, // 224: initializer ->  assignment_expression
     {342, 2}, // 225: initializer_list ->  designation initializer
     {342, 1}, // 226: initializer_list ->  initializer
     {342, 4}, // 227: initializer_list (',') ->  initializer_list ',' designation initializer
     {342, 3}, // 228: initializer_list (',') ->  initializer_list ',' initializer
     {391, 2}, // 229: designation ('=') ->  designator_list '='
     {392, 1}, // 230: designator_list ->  designator
     {392, 2}, // 231: designator_list ->  designator_list designator
     {393, 3}, // 232: designator ('[') ->  '[' constant_expression ']'
     {393, 2}, // 233: designator ('.') ->  '.' IDENTIFIER
     {362, 7}, // 234: static_assert_declaration (STATIC_ASSERT) ->  STATIC_ASSERT '(' constant_expression ',' STRING_LITERAL ')' ';'
     {394, 1}, // 235: statement ->  labeled_statement
     {394, 1}, // 236: statement ->  compound_statement
     {394, 1}, // 237: statement ->  expression_statement
     {394, 1}, // 238: statement ->  selection_statement
     {394, 1}, // 239: statement ->  iteration_statement
     {394, 1}, // 240: statement ->  jump_statement
     {395, 3}, // 241: labeled_statement (IDENTIFIER) ->  IDENTIFIER ':' statement
     {395, 4}, // 242: labeled_statement (CASE) ->  CASE constant_expression ':' statement
     {395, 3}, // 243: labeled_statement (DEFAULT) ->  DEFAULT ':' statement
     {396, 2}, // 244: compound_statement ('{') ->  '{' '}'
     {396, 3}, // 245: compound_statement ('{') ->  '{' block_item_list '}'
     {401, 1}, // 246: block_item_list ->  block_item
     {401, 2}, // 247: block_item_list ->  block_item_list block_item
     {402, 1}, // 248: block_item ->  declaration
     {402, 1}, // 249: block_item ->  statement
     {397, 1}, // 250: expression_statement (';') ->  ';'
     {397, 2}, // 251: expression_statement (';') ->  expression ';'
     {398, 7}, // 252: selection_statement (IF) ->  IF '(' expression ')' statement ELSE statement
     {398, 5}, // 253: selection_statement (IF) ->  IF '(' expression ')' statement
     {398, 5}, // 254: selection_statement (SWITCH) ->  SWITCH '(' expression ')' statement
     {399, 5}, // 255: iteration_statement (WHILE) ->  WHILE '(' expression ')' statement
     {399, 7}, // 256: iteration_statement (DO) ->  DO statement WHILE '(' expression ')' ';'
     {399, 6}, // 257: iteration_statement (FOR) ->  FOR '(' expression_statement expression_statement ')' statement
     {399, 7}, // 258: iteration_statement (FOR) ->  FOR '(' expression_statement expression_statement expression ')' statement
     {399, 6}, // 259: iteration_statement (FOR) ->  FOR '(' declaration expression_statement ')' statement
     {399, 7}, // 260: iteration_statement (FOR) ->  FOR '(' declaration expression_statement expression ')' statement
     {400, 3}, // 261: jump_statement (GOTO) ->  GOTO IDENTIFIER ';'
     {400, 2}, // 262: jump_statement (CONTINUE) ->  CONTINUE ';'
     {400, 2}, // 263: jump_statement (BREAK) ->  BREAK ';'
     {400, 2}, // 264: jump_statement (RETURN) ->  RETURN ';'
     {400, 3}, // 265: jump_statement (RETURN) ->  RETURN expression ';'
     {403, 1}, // 266: translation_unit ->  external_declaration
     {403, 2}, // 267: translation_unit ->  translation_unit external_declaration
     {404, 1}, // 268: external_declaration ->  function_definition
     {404, 1}, // 269: external_declaration ->  declaration
     {405, 4}, // 270: function_definition ->  declaration_specifiers declarator declaration_list compound_statement
     {405, 3}, // 271: function_definition ->  declaration_specifiers declarator compound_statement
     {406, 1}, // 272: declaration_list ->  declaration
     {406, 2}, // 273: declaration_list ->  declaration_list declaration
     {407, 1}, // 274: translation_unit_$ ->  translation_unit
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { REQ_TOKEN}, { 46} },                             
    { {       403}, {  1} }, // translation_unit         
    { {       404}, {  2} }, // external_declaration     
    { {       405}, {  3} }, // function_definition      
    { {       359}, {  4} }, // declaration              
    { {       360}, {  5} }, // declaration_specifiers   
    { {       362}, {  6} }, // static_assert_declaration
    { {       363}, {  7} }, // storage_class_specifier  
    { {       364}, {  8} }, // type_specifier           
    { {       365}, {  9} }, // type_qualifier           
    { {       366}, { 10} }, // function_specifier       
    { {       367}, { 11} }, // alignment_specifier      
    { {       328}, { 12} }, // STATIC_ASSERT            
    { {       286}, { 13} }, // TYPEDEF                  
    { {       287}, { 14} }, // EXTERN                   
    { {       288}, { 15} }, // STATIC                   
    { {       329}, { 16} }, // THREAD_LOCAL             
    { {       289}, { 17} }, // AUTO                     
    { {       290}, { 18} }, // REGISTER                 
    { {       304}, { 19} }, // VOID                     
    { {       296}, { 20} }, // CHAR                     
    { {       297}, { 21} }, // SHORT                    
    { {       298}, { 22} }, // INT                      
    { {       299}, { 23} }, // LONG                     
    { {       302}, { 24} }, // FLOAT                    
    { {       303}, { 25} }, // DOUBLE                   
    { {       300}, { 26} }, // SIGNED                   
    { {       301}, { 27} }, // UNSIGNED                 
    { {       295}, { 28} }, // BOOL                     
    { {       305}, { 29} }, // COMPLEX                  
    { {       306}, { 30} }, // IMAGINARY                
    { {       371}, { 31} }, // atomic_type_specifier    
    { {       372}, { 32} }, // struct_or_union_specifier
    { {       373}, { 33} }, // enum_specifier           
    { {       284}, { 34} }, // TYPEDEF_NAME             
    { {       292}, { 35} }, // CONST                    
    { {       293}, { 36} }, // RESTRICT                 
    { {       294}, { 37} }, // VOLATILE                 
    { {       325}, { 38} }, // ATOMIC                   
    { {       291}, { 39} }, // INLINE                   
    { {       327}, { 40} }, // NORETURN                 
    { {       323}, { 41} }, // ALIGNAS                  
    { {       374}, { 42} }, // struct_or_union          
    { {       309}, { 43} }, // ENUM                     
    { {       307}, { 44} }, // STRUCT                   
    { {       308}, { 45} }, // UNION                    
    { {         0}, {  0} },                             
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {           46} },                             
    { {       404}, {           46} }, // external_declaration     
    { {       405}, {            3} }, // function_definition      
    { {       359}, {            4} }, // declaration              
    { {       360}, {            5} }, // declaration_specifiers   
    { {       362}, {            6} }, // static_assert_declaration
    { {       363}, {            7} }, // storage_class_specifier  
    { {       364}, {            8} }, // type_specifier           
    { {       365}, {            9} }, // type_qualifier           
    { {       366}, {           10} }, // function_specifier       
    { {       367}, {           11} }, // alignment_specifier      
    { {       328}, {           12} }, // STATIC_ASSERT            
    { {       286}, {           13} }, // TYPEDEF                  
    { {       287}, {           14} }, // EXTERN                   
    { {       288}, {           15} }, // STATIC                   
    { {       329}, {           16} }, // THREAD_LOCAL             
    { {       289}, {           17} }, // AUTO                     
    { {       290}, {           18} }, // REGISTER                 
    { {       304}, {           19} }, // VOID                     
    { {       296}, {           20} }, // CHAR                     
    { {       297}, {           21} }, // SHORT                    
    { {       298}, {           22} }, // INT                      
    { {       299}, {           23} }, // LONG                     
    { {       302}, {           24} }, // FLOAT                    
    { {       303}, {           25} }, // DOUBLE                   
    { {       300}, {           26} }, // SIGNED                   
    { {       301}, {           27} }, // UNSIGNED                 
    { {       295}, {           28} }, // BOOL                     
    { {       305}, {           29} }, // COMPLEX                  
    { {       306}, {           30} }, // IMAGINARY                
    { {       371}, {           31} }, // atomic_type_specifier    
    { {       372}, {           32} }, // struct_or_union_specifier
    { {       373}, {           33} }, // enum_specifier           
    { {       284}, {           34} }, // TYPEDEF_NAME             
    { {       292}, {           35} }, // CONST                    
    { {       293}, {           36} }, // RESTRICT                 
    { {       294}, {           37} }, // VOLATILE                 
    { {       325}, {           38} }, // ATOMIC                   
    { {       291}, {           39} }, // INLINE                   
    { {       327}, {           40} }, // NORETURN                 
    { {       323}, {           41} }, // ALIGNAS                  
    { {       374}, {           42} }, // struct_or_union          
    { {       309}, {           43} }, // ENUM                     
    { {       307}, {           44} }, // STRUCT                   
    { {       308}, {           45} }, // UNION                    
    { {     _EOF_}, { PARSE_ACCEPT} },                             
    { {         0}, {            0} },                             
};

SR__ s_2[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -266} }, 
};

SR__ s_3[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -268} }, 
};

SR__ s_4[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -269} }, 
};

SR__ s_5[] =
{
    { { REQ_TOKEN}, { 10} },                        
    { {       369}, { 47} }, // declarator          
    { {        59}, { 48} }, // ';'                 
    { {       361}, { 49} }, // init_declarator_list
    { {       382}, { 50} }, // pointer             
    { {       383}, { 51} }, // direct_declarator   
    { {       368}, { 52} }, // init_declarator     
    { {        42}, { 53} }, // '*'                 
    { {       257}, { 54} }, // IDENTIFIER          
    { {        40}, { 55} }, // '('                 
    { {         0}, {  0} },                        
};

SR__ s_6[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -91} }, 
};

SR__ s_7[] =
{
    { { REQ_DEF}, {  40} },                             
    { {     360}, {  56} }, // declaration_specifiers   
    { {     363}, {   7} }, // storage_class_specifier  
    { {     364}, {   8} }, // type_specifier           
    { {     365}, {   9} }, // type_qualifier           
    { {     366}, {  10} }, // function_specifier       
    { {     367}, {  11} }, // alignment_specifier      
    { {     286}, {  13} }, // TYPEDEF                  
    { {     287}, {  14} }, // EXTERN                   
    { {     288}, {  15} }, // STATIC                   
    { {     329}, {  16} }, // THREAD_LOCAL             
    { {     289}, {  17} }, // AUTO                     
    { {     290}, {  18} }, // REGISTER                 
    { {     304}, {  19} }, // VOID                     
    { {     296}, {  20} }, // CHAR                     
    { {     297}, {  21} }, // SHORT                    
    { {     298}, {  22} }, // INT                      
    { {     299}, {  23} }, // LONG                     
    { {     302}, {  24} }, // FLOAT                    
    { {     303}, {  25} }, // DOUBLE                   
    { {     300}, {  26} }, // SIGNED                   
    { {     301}, {  27} }, // UNSIGNED                 
    { {     295}, {  28} }, // BOOL                     
    { {     305}, {  29} }, // COMPLEX                  
    { {     306}, {  30} }, // IMAGINARY                
    { {     371}, {  31} }, // atomic_type_specifier    
    { {     372}, {  32} }, // struct_or_union_specifier
    { {     373}, {  33} }, // enum_specifier           
    { {     284}, {  34} }, // TYPEDEF_NAME             
    { {     292}, {  35} }, // CONST                    
    { {     293}, {  36} }, // RESTRICT                 
    { {     294}, {  37} }, // VOLATILE                 
    { {     325}, {  38} }, // ATOMIC                   
    { {     291}, {  39} }, // INLINE                   
    { {     327}, {  40} }, // NORETURN                 
    { {     323}, {  41} }, // ALIGNAS                  
    { {     374}, {  42} }, // struct_or_union          
    { {     309}, {  43} }, // ENUM                     
    { {     307}, {  44} }, // STRUCT                   
    { {     308}, {  45} }, // UNION                    
    { {       0}, { -93} },                             
};

SR__ s_8[] =
{
    { { REQ_DEF}, {  40} },                             
    { {     360}, {  57} }, // declaration_specifiers   
    { {     363}, {   7} }, // storage_class_specifier  
    { {     364}, {   8} }, // type_specifier           
    { {     365}, {   9} }, // type_qualifier           
    { {     366}, {  10} }, // function_specifier       
    { {     367}, {  11} }, // alignment_specifier      
    { {     286}, {  13} }, // TYPEDEF                  
    { {     287}, {  14} }, // EXTERN                   
    { {     288}, {  15} }, // STATIC                   
    { {     329}, {  16} }, // THREAD_LOCAL             
    { {     289}, {  17} }, // AUTO                     
    { {     290}, {  18} }, // REGISTER                 
    { {     304}, {  19} }, // VOID                     
    { {     296}, {  20} }, // CHAR                     
    { {     297}, {  21} }, // SHORT                    
    { {     298}, {  22} }, // INT                      
    { {     299}, {  23} }, // LONG                     
    { {     302}, {  24} }, // FLOAT                    
    { {     303}, {  25} }, // DOUBLE                   
    { {     300}, {  26} }, // SIGNED                   
    { {     301}, {  27} }, // UNSIGNED                 
    { {     295}, {  28} }, // BOOL                     
    { {     305}, {  29} }, // COMPLEX                  
    { {     306}, {  30} }, // IMAGINARY                
    { {     371}, {  31} }, // atomic_type_specifier    
    { {     372}, {  32} }, // struct_or_union_specifier
    { {     373}, {  33} }, // enum_specifier           
    { {     284}, {  34} }, // TYPEDEF_NAME             
    { {     292}, {  35} }, // CONST                    
    { {     293}, {  36} }, // RESTRICT                 
    { {     294}, {  37} }, // VOLATILE                 
    { {     325}, {  38} }, // ATOMIC                   
    { {     291}, {  39} }, // INLINE                   
    { {     327}, {  40} }, // NORETURN                 
    { {     323}, {  41} }, // ALIGNAS                  
    { {     374}, {  42} }, // struct_or_union          
    { {     309}, {  43} }, // ENUM                     
    { {     307}, {  44} }, // STRUCT                   
    { {     308}, {  45} }, // UNION                    
    { {       0}, { -95} },                             
};

SR__ s_9[] =
{
    { { REQ_DEF}, {  40} },                             
    { {     360}, {  58} }, // declaration_specifiers   
    { {     363}, {   7} }, // storage_class_specifier  
    { {     364}, {   8} }, // type_specifier           
    { {     365}, {   9} }, // type_qualifier           
    { {     366}, {  10} }, // function_specifier       
    { {     367}, {  11} }, // alignment_specifier      
    { {     286}, {  13} }, // TYPEDEF                  
    { {     287}, {  14} }, // EXTERN                   
    { {     288}, {  15} }, // STATIC                   
    { {     329}, {  16} }, // THREAD_LOCAL             
    { {     289}, {  17} }, // AUTO                     
    { {     290}, {  18} }, // REGISTER                 
    { {     304}, {  19} }, // VOID                     
    { {     296}, {  20} }, // CHAR                     
    { {     297}, {  21} }, // SHORT                    
    { {     298}, {  22} }, // INT                      
    { {     299}, {  23} }, // LONG                     
    { {     302}, {  24} }, // FLOAT                    
    { {     303}, {  25} }, // DOUBLE                   
    { {     300}, {  26} }, // SIGNED                   
    { {     301}, {  27} }, // UNSIGNED                 
    { {     295}, {  28} }, // BOOL                     
    { {     305}, {  29} }, // COMPLEX                  
    { {     306}, {  30} }, // IMAGINARY                
    { {     371}, {  31} }, // atomic_type_specifier    
    { {     372}, {  32} }, // struct_or_union_specifier
    { {     373}, {  33} }, // enum_specifier           
    { {     284}, {  34} }, // TYPEDEF_NAME             
    { {     292}, {  35} }, // CONST                    
    { {     293}, {  36} }, // RESTRICT                 
    { {     294}, {  37} }, // VOLATILE                 
    { {     325}, {  38} }, // ATOMIC                   
    { {     291}, {  39} }, // INLINE                   
    { {     327}, {  40} }, // NORETURN                 
    { {     323}, {  41} }, // ALIGNAS                  
    { {     374}, {  42} }, // struct_or_union          
    { {     309}, {  43} }, // ENUM                     
    { {     307}, {  44} }, // STRUCT                   
    { {     308}, {  45} }, // UNION                    
    { {       0}, { -97} },                             
};

SR__ s_10[] =
{
    { { REQ_DEF}, {  40} },                             
    { {     360}, {  59} }, // declaration_specifiers   
    { {     363}, {   7} }, // storage_class_specifier  
    { {     364}, {   8} }, // type_specifier           
    { {     365}, {   9} }, // type_qualifier           
    { {     366}, {  10} }, // function_specifier       
    { {     367}, {  11} }, // alignment_specifier      
    { {     286}, {  13} }, // TYPEDEF                  
    { {     287}, {  14} }, // EXTERN                   
    { {     288}, {  15} }, // STATIC                   
    { {     329}, {  16} }, // THREAD_LOCAL             
    { {     289}, {  17} }, // AUTO                     
    { {     290}, {  18} }, // REGISTER                 
    { {     304}, {  19} }, // VOID                     
    { {     296}, {  20} }, // CHAR                     
    { {     297}, {  21} }, // SHORT                    
    { {     298}, {  22} }, // INT                      
    { {     299}, {  23} }, // LONG                     
    { {     302}, {  24} }, // FLOAT                    
    { {     303}, {  25} }, // DOUBLE                   
    { {     300}, {  26} }, // SIGNED                   
    { {     301}, {  27} }, // UNSIGNED                 
    { {     295}, {  28} }, // BOOL                     
    { {     305}, {  29} }, // COMPLEX                  
    { {     306}, {  30} }, // IMAGINARY                
    { {     371}, {  31} }, // atomic_type_specifier    
    { {     372}, {  32} }, // struct_or_union_specifier
    { {     373}, {  33} }, // enum_specifier           
    { {     284}, {  34} }, // TYPEDEF_NAME             
    { {     292}, {  35} }, // CONST                    
    { {     293}, {  36} }, // RESTRICT                 
    { {     294}, {  37} }, // VOLATILE                 
    { {     325}, {  38} }, // ATOMIC                   
    { {     291}, {  39} }, // INLINE                   
    { {     327}, {  40} }, // NORETURN                 
    { {     323}, {  41} }, // ALIGNAS                  
    { {     374}, {  42} }, // struct_or_union          
    { {     309}, {  43} }, // ENUM                     
    { {     307}, {  44} }, // STRUCT                   
    { {     308}, {  45} }, // UNION                    
    { {       0}, { -99} },                             
};

SR__ s_11[] =
{
    { { REQ_DEF}, {   40} },                             
    { {     360}, {   60} }, // declaration_specifiers   
    { {     363}, {    7} }, // storage_class_specifier  
    { {     364}, {    8} }, // type_specifier           
    { {     365}, {    9} }, // type_qualifier           
    { {     366}, {   10} }, // function_specifier       
    { {     367}, {   11} }, // alignment_specifier      
    { {     286}, {   13} }, // TYPEDEF                  
    { {     287}, {   14} }, // EXTERN                   
    { {     288}, {   15} }, // STATIC                   
    { {     329}, {   16} }, // THREAD_LOCAL             
    { {     289}, {   17} }, // AUTO                     
    { {     290}, {   18} }, // REGISTER                 
    { {     304}, {   19} }, // VOID                     
    { {     296}, {   20} }, // CHAR                     
    { {     297}, {   21} }, // SHORT                    
    { {     298}, {   22} }, // INT                      
    { {     299}, {   23} }, // LONG                     
    { {     302}, {   24} }, // FLOAT                    
    { {     303}, {   25} }, // DOUBLE                   
    { {     300}, {   26} }, // SIGNED                   
    { {     301}, {   27} }, // UNSIGNED                 
    { {     295}, {   28} }, // BOOL                     
    { {     305}, {   29} }, // COMPLEX                  
    { {     306}, {   30} }, // IMAGINARY                
    { {     371}, {   31} }, // atomic_type_specifier    
    { {     372}, {   32} }, // struct_or_union_specifier
    { {     373}, {   33} }, // enum_specifier           
    { {     284}, {   34} }, // TYPEDEF_NAME             
    { {     292}, {   35} }, // CONST                    
    { {     293}, {   36} }, // RESTRICT                 
    { {     294}, {   37} }, // VOLATILE                 
    { {     325}, {   38} }, // ATOMIC                   
    { {     291}, {   39} }, // INLINE                   
    { {     327}, {   40} }, // NORETURN                 
    { {     323}, {   41} }, // ALIGNAS                  
    { {     374}, {   42} }, // struct_or_union          
    { {     309}, {   43} }, // ENUM                     
    { {     307}, {   44} }, // STRUCT                   
    { {     308}, {   45} }, // UNION                    
    { {       0}, { -101} },                             
};

SR__ s_12[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 61} }, // '('
    { {         0}, {  0} },       
};

SR__ s_13[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -106} }, 
};

SR__ s_14[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -107} }, 
};

SR__ s_15[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -108} }, 
};

SR__ s_16[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -109} }, 
};

SR__ s_17[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -110} }, 
};

SR__ s_18[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -111} }, 
};

SR__ s_19[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -112} }, 
};

SR__ s_20[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -113} }, 
};

SR__ s_21[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -114} }, 
};

SR__ s_22[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -115} }, 
};

SR__ s_23[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -116} }, 
};

SR__ s_24[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -117} }, 
};

SR__ s_25[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -118} }, 
};

SR__ s_26[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -119} }, 
};

SR__ s_27[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -120} }, 
};

SR__ s_28[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -121} }, 
};

SR__ s_29[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -122} }, 
};

SR__ s_30[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -123} }, 
};

SR__ s_31[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -124} }, 
};

SR__ s_32[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -125} }, 
};

SR__ s_33[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -126} }, 
};

SR__ s_34[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -127} }, 
};

SR__ s_35[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -157} }, 
};

SR__ s_36[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -158} }, 
};

SR__ s_37[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -159} }, 
};

SR__ s_38[] =
{
    { { REQ_DEF}, {    2} },       
    { {      40}, {   62} }, // '('
    { {       0}, { -160} },       
};

SR__ s_39[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -161} }, 
};

SR__ s_40[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -162} }, 
};

SR__ s_41[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 63} }, // '('
    { {         0}, {  0} },       
};

SR__ s_42[] =
{
    { { REQ_TOKEN}, {  3} },              
    { {       123}, { 64} }, // '{'       
    { {       257}, { 65} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_43[] =
{
    { { REQ_TOKEN}, {  3} },              
    { {       123}, { 66} }, // '{'       
    { {       257}, { 67} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_44[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -131} }, 
};

SR__ s_45[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -132} }, 
};

SR__ s_46[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -267} }, 
};

SR__ s_47[] =
{
    { { REQ_DEF}, {   47} },                             
    { {     406}, {   68} }, // declaration_list         
    { {     396}, {   69} }, // compound_statement       
    { {      61}, {   70} }, // '='                      
    { {     359}, {   71} }, // declaration              
    { {     123}, {   72} }, // '{'                      
    { {     360}, {   73} }, // declaration_specifiers   
    { {     362}, {    6} }, // static_assert_declaration
    { {     363}, {    7} }, // storage_class_specifier  
    { {     364}, {    8} }, // type_specifier           
    { {     365}, {    9} }, // type_qualifier           
    { {     366}, {   10} }, // function_specifier       
    { {     367}, {   11} }, // alignment_specifier      
    { {     328}, {   12} }, // STATIC_ASSERT            
    { {     286}, {   13} }, // TYPEDEF                  
    { {     287}, {   14} }, // EXTERN                   
    { {     288}, {   15} }, // STATIC                   
    { {     329}, {   16} }, // THREAD_LOCAL             
    { {     289}, {   17} }, // AUTO                     
    { {     290}, {   18} }, // REGISTER                 
    { {     304}, {   19} }, // VOID                     
    { {     296}, {   20} }, // CHAR                     
    { {     297}, {   21} }, // SHORT                    
    { {     298}, {   22} }, // INT                      
    { {     299}, {   23} }, // LONG                     
    { {     302}, {   24} }, // FLOAT                    
    { {     303}, {   25} }, // DOUBLE                   
    { {     300}, {   26} }, // SIGNED                   
    { {     301}, {   27} }, // UNSIGNED                 
    { {     295}, {   28} }, // BOOL                     
    { {     305}, {   29} }, // COMPLEX                  
    { {     306}, {   30} }, // IMAGINARY                
    { {     371}, {   31} }, // atomic_type_specifier    
    { {     372}, {   32} }, // struct_or_union_specifier
    { {     373}, {   33} }, // enum_specifier           
    { {     284}, {   34} }, // TYPEDEF_NAME             
    { {     292}, {   35} }, // CONST                    
    { {     293}, {   36} }, // RESTRICT                 
    { {     294}, {   37} }, // VOLATILE                 
    { {     325}, {   38} }, // ATOMIC                   
    { {     291}, {   39} }, // INLINE                   
    { {     327}, {   40} }, // NORETURN                 
    { {     323}, {   41} }, // ALIGNAS                  
    { {     374}, {   42} }, // struct_or_union          
    { {     309}, {   43} }, // ENUM                     
    { {     307}, {   44} }, // STRUCT                   
    { {     308}, {   45} }, // UNION                    
    { {       0}, { -105} },                             
};

SR__ s_48[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -89} }, 
};

SR__ s_49[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {        59}, { 74} }, // ';'
    { {        44}, { 75} }, // ','
    { {         0}, {  0} },       
};

SR__ s_50[] =
{
    { { REQ_TOKEN}, {  4} },                     
    { {       383}, { 76} }, // direct_declarator
    { {       257}, { 54} }, // IDENTIFIER       
    { {        40}, { 55} }, // '('              
    { {         0}, {  0} },                     
};

SR__ s_51[] =
{
    { { REQ_DEF}, {    3} },       
    { {      91}, {   77} }, // '['
    { {      40}, {   78} }, // '('
    { {       0}, { -166} },       
};

SR__ s_52[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -102} }, 
};

SR__ s_53[] =
{
    { { REQ_DEF}, {    9} },                       
    { {     384}, {   79} }, // type_qualifier_list
    { {     382}, {   80} }, // pointer            
    { {     365}, {   81} }, // type_qualifier     
    { {      42}, {   53} }, // '*'                
    { {     292}, {   35} }, // CONST              
    { {     293}, {   36} }, // RESTRICT           
    { {     294}, {   37} }, // VOLATILE           
    { {     325}, {   82} }, // ATOMIC             
    { {       0}, { -184} },                       
};

SR__ s_54[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -167} }, 
};

SR__ s_55[] =
{
    { { REQ_TOKEN}, {  7} },                     
    { {       369}, { 83} }, // declarator       
    { {       382}, { 50} }, // pointer          
    { {       383}, { 51} }, // direct_declarator
    { {        42}, { 53} }, // '*'              
    { {       257}, { 54} }, // IDENTIFIER       
    { {        40}, { 55} }, // '('              
    { {         0}, {  0} },                     
};

SR__ s_56[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -92} }, 
};

SR__ s_57[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -94} }, 
};

SR__ s_58[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -96} }, 
};

SR__ s_59[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -98} }, 
};

SR__ s_60[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -100} }, 
};

SR__ s_61[] =
{
    { { REQ_TOKEN}, {  38} },                             
    { {       358}, {  84} }, // constant_expression      
    { {       356}, {  85} }, // conditional_expression   
    { {       355}, {  86} }, // logical_or_expression    
    { {       354}, {  87} }, // logical_and_expression   
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {       343}, {  97} }, // unary_expression         
    { {        40}, {  98} }, // '('                      
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       330}, { 105} }, // primary_expression       
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {         0}, {   0} },                             
};

SR__ s_62[] =
{
    { { REQ_TOKEN}, {  29} },                             
    { {       339}, { 121} }, // type_name                
    { {       377}, { 122} }, // specifier_qualifier_list 
    { {       364}, { 123} }, // type_specifier           
    { {       365}, { 124} }, // type_qualifier           
    { {       304}, {  19} }, // VOID                     
    { {       296}, {  20} }, // CHAR                     
    { {       297}, {  21} }, // SHORT                    
    { {       298}, {  22} }, // INT                      
    { {       299}, {  23} }, // LONG                     
    { {       302}, {  24} }, // FLOAT                    
    { {       303}, {  25} }, // DOUBLE                   
    { {       300}, {  26} }, // SIGNED                   
    { {       301}, {  27} }, // UNSIGNED                 
    { {       295}, {  28} }, // BOOL                     
    { {       305}, {  29} }, // COMPLEX                  
    { {       306}, {  30} }, // IMAGINARY                
    { {       371}, {  31} }, // atomic_type_specifier    
    { {       372}, {  32} }, // struct_or_union_specifier
    { {       373}, {  33} }, // enum_specifier           
    { {       284}, {  34} }, // TYPEDEF_NAME             
    { {       292}, {  35} }, // CONST                    
    { {       293}, {  36} }, // RESTRICT                 
    { {       294}, {  37} }, // VOLATILE                 
    { {       325}, {  38} }, // ATOMIC                   
    { {       374}, {  42} }, // struct_or_union          
    { {       309}, {  43} }, // ENUM                     
    { {       307}, {  44} }, // STRUCT                   
    { {       308}, {  45} }, // UNION                    
    { {         0}, {   0} },                             
};

SR__ s_63[] =
{
    { { REQ_TOKEN}, {  66} },                             
    { {       339}, { 125} }, // type_name                
    { {       358}, { 126} }, // constant_expression      
    { {       377}, { 122} }, // specifier_qualifier_list 
    { {       356}, {  85} }, // conditional_expression   
    { {       364}, { 123} }, // type_specifier           
    { {       365}, { 124} }, // type_qualifier           
    { {       355}, {  86} }, // logical_or_expression    
    { {       304}, {  19} }, // VOID                     
    { {       296}, {  20} }, // CHAR                     
    { {       297}, {  21} }, // SHORT                    
    { {       298}, {  22} }, // INT                      
    { {       299}, {  23} }, // LONG                     
    { {       302}, {  24} }, // FLOAT                    
    { {       303}, {  25} }, // DOUBLE                   
    { {       300}, {  26} }, // SIGNED                   
    { {       301}, {  27} }, // UNSIGNED                 
    { {       295}, {  28} }, // BOOL                     
    { {       305}, {  29} }, // COMPLEX                  
    { {       306}, {  30} }, // IMAGINARY                
    { {       371}, {  31} }, // atomic_type_specifier    
    { {       372}, {  32} }, // struct_or_union_specifier
    { {       373}, {  33} }, // enum_specifier           
    { {       284}, {  34} }, // TYPEDEF_NAME             
    { {       292}, {  35} }, // CONST                    
    { {       293}, {  36} }, // RESTRICT                 
    { {       294}, {  37} }, // VOLATILE                 
    { {       325}, {  38} }, // ATOMIC                   
    { {       354}, {  87} }, // logical_and_expression   
    { {       374}, {  42} }, // struct_or_union          
    { {       309}, {  43} }, // ENUM                     
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       307}, {  44} }, // STRUCT                   
    { {       308}, {  45} }, // UNION                    
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {       343}, {  97} }, // unary_expression         
    { {        40}, {  98} }, // '('                      
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       330}, { 105} }, // primary_expression       
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {         0}, {   0} },                             
};

SR__ s_64[] =
{
    { { REQ_TOKEN}, {  32} },                             
    { {       375}, { 127} }, // struct_declaration_list  
    { {       376}, { 128} }, // struct_declaration       
    { {       377}, { 129} }, // specifier_qualifier_list 
    { {       362}, { 130} }, // static_assert_declaration
    { {       364}, { 123} }, // type_specifier           
    { {       365}, { 124} }, // type_qualifier           
    { {       328}, {  12} }, // STATIC_ASSERT            
    { {       304}, {  19} }, // VOID                     
    { {       296}, {  20} }, // CHAR                     
    { {       297}, {  21} }, // SHORT                    
    { {       298}, {  22} }, // INT                      
    { {       299}, {  23} }, // LONG                     
    { {       302}, {  24} }, // FLOAT                    
    { {       303}, {  25} }, // DOUBLE                   
    { {       300}, {  26} }, // SIGNED                   
    { {       301}, {  27} }, // UNSIGNED                 
    { {       295}, {  28} }, // BOOL                     
    { {       305}, {  29} }, // COMPLEX                  
    { {       306}, {  30} }, // IMAGINARY                
    { {       371}, {  31} }, // atomic_type_specifier    
    { {       372}, {  32} }, // struct_or_union_specifier
    { {       373}, {  33} }, // enum_specifier           
    { {       284}, {  34} }, // TYPEDEF_NAME             
    { {       292}, {  35} }, // CONST                    
    { {       293}, {  36} }, // RESTRICT                 
    { {       294}, {  37} }, // VOLATILE                 
    { {       325}, {  38} }, // ATOMIC                   
    { {       374}, {  42} }, // struct_or_union          
    { {       309}, {  43} }, // ENUM                     
    { {       307}, {  44} }, // STRUCT                   
    { {       308}, {  45} }, // UNION                    
    { {         0}, {   0} },                             
};

SR__ s_65[] =
{
    { { REQ_DEF}, {    2} },       
    { {     123}, {  131} }, // '{'
    { {       0}, { -130} },       
};

SR__ s_66[] =
{
    { { REQ_TOKEN}, {   5} },                        
    { {       380}, { 132} }, // enumerator_list     
    { {       381}, { 133} }, // enumerator          
    { {       335}, { 134} }, // enumeration_constant
    { {       257}, { 135} }, // IDENTIFIER          
    { {         0}, {   0} },                        
};

SR__ s_67[] =
{
    { { REQ_DEF}, {    2} },       
    { {     123}, {  136} }, // '{'
    { {       0}, { -151} },       
};

SR__ s_68[] =
{
    { { REQ_TOKEN}, {  45} },                             
    { {       396}, { 137} }, // compound_statement       
    { {       359}, { 138} }, // declaration              
    { {       123}, {  72} }, // '{'                      
    { {       360}, {  73} }, // declaration_specifiers   
    { {       362}, {   6} }, // static_assert_declaration
    { {       363}, {   7} }, // storage_class_specifier  
    { {       364}, {   8} }, // type_specifier           
    { {       365}, {   9} }, // type_qualifier           
    { {       366}, {  10} }, // function_specifier       
    { {       367}, {  11} }, // alignment_specifier      
    { {       328}, {  12} }, // STATIC_ASSERT            
    { {       286}, {  13} }, // TYPEDEF                  
    { {       287}, {  14} }, // EXTERN                   
    { {       288}, {  15} }, // STATIC                   
    { {       329}, {  16} }, // THREAD_LOCAL             
    { {       289}, {  17} }, // AUTO                     
    { {       290}, {  18} }, // REGISTER                 
    { {       304}, {  19} }, // VOID                     
    { {       296}, {  20} }, // CHAR                     
    { {       297}, {  21} }, // SHORT                    
    { {       298}, {  22} }, // INT                      
    { {       299}, {  23} }, // LONG                     
    { {       302}, {  24} }, // FLOAT                    
    { {       303}, {  25} }, // DOUBLE                   
    { {       300}, {  26} }, // SIGNED                   
    { {       301}, {  27} }, // UNSIGNED                 
    { {       295}, {  28} }, // BOOL                     
    { {       305}, {  29} }, // COMPLEX                  
    { {       306}, {  30} }, // IMAGINARY                
    { {       371}, {  31} }, // atomic_type_specifier    
    { {       372}, {  32} }, // struct_or_union_specifier
    { {       373}, {  33} }, // enum_specifier           
    { {       284}, {  34} }, // TYPEDEF_NAME             
    { {       292}, {  35} }, // CONST                    
    { {       293}, {  36} }, // RESTRICT                 
    { {       294}, {  37} }, // VOLATILE                 
    { {       325}, {  38} }, // ATOMIC                   
    { {       291}, {  39} }, // INLINE                   
    { {       327}, {  40} }, // NORETURN                 
    { {       323}, {  41} }, // ALIGNAS                  
    { {       374}, {  42} }, // struct_or_union          
    { {       309}, {  43} }, // ENUM                     
    { {       307}, {  44} }, // STRUCT                   
    { {       308}, {  45} }, // UNION                    
    { {         0}, {   0} },                             
};

SR__ s_69[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -271} }, 
};

SR__ s_70[] =
{
    { { REQ_TOKEN}, {  40} },                             
    { {       370}, { 139} }, // initializer              
    { {       123}, { 140} }, // '{'                      
    { {       336}, { 141} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_71[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -272} }, 
};

SR__ s_72[] =
{
    { { REQ_TOKEN}, { 104} },                             
    { {       125}, { 144} }, // '}'                      
    { {       401}, { 145} }, // block_item_list          
    { {       402}, { 146} }, // block_item               
    { {       359}, { 147} }, // declaration              
    { {       394}, { 148} }, // statement                
    { {       360}, {  73} }, // declaration_specifiers   
    { {       362}, {   6} }, // static_assert_declaration
    { {       395}, { 149} }, // labeled_statement        
    { {       396}, { 150} }, // compound_statement       
    { {       397}, { 151} }, // expression_statement     
    { {       398}, { 152} }, // selection_statement      
    { {       399}, { 153} }, // iteration_statement      
    { {       400}, { 154} }, // jump_statement           
    { {       363}, {   7} }, // storage_class_specifier  
    { {       364}, {   8} }, // type_specifier           
    { {       365}, {   9} }, // type_qualifier           
    { {       366}, {  10} }, // function_specifier       
    { {       367}, {  11} }, // alignment_specifier      
    { {       328}, {  12} }, // STATIC_ASSERT            
    { {       257}, { 155} }, // IDENTIFIER               
    { {       311}, { 156} }, // CASE                     
    { {       312}, { 157} }, // DEFAULT                  
    { {       123}, {  72} }, // '{'                      
    { {        59}, { 158} }, // ';'                      
    { {       333}, { 159} }, // expression               
    { {       313}, { 160} }, // IF                       
    { {       315}, { 161} }, // SWITCH                   
    { {       316}, { 162} }, // WHILE                    
    { {       317}, { 163} }, // DO                       
    { {       318}, { 164} }, // FOR                      
    { {       319}, { 165} }, // GOTO                     
    { {       320}, { 166} }, // CONTINUE                 
    { {       321}, { 167} }, // BREAK                    
    { {       322}, { 168} }, // RETURN                   
    { {       286}, {  13} }, // TYPEDEF                  
    { {       287}, {  14} }, // EXTERN                   
    { {       288}, {  15} }, // STATIC                   
    { {       329}, {  16} }, // THREAD_LOCAL             
    { {       289}, {  17} }, // AUTO                     
    { {       290}, {  18} }, // REGISTER                 
    { {       304}, {  19} }, // VOID                     
    { {       296}, {  20} }, // CHAR                     
    { {       297}, {  21} }, // SHORT                    
    { {       298}, {  22} }, // INT                      
    { {       299}, {  23} }, // LONG                     
    { {       302}, {  24} }, // FLOAT                    
    { {       303}, {  25} }, // DOUBLE                   
    { {       300}, {  26} }, // SIGNED                   
    { {       301}, {  27} }, // UNSIGNED                 
    { {       295}, {  28} }, // BOOL                     
    { {       305}, {  29} }, // COMPLEX                  
    { {       306}, {  30} }, // IMAGINARY                
    { {       371}, {  31} }, // atomic_type_specifier    
    { {       372}, {  32} }, // struct_or_union_specifier
    { {       373}, {  33} }, // enum_specifier           
    { {       284}, {  34} }, // TYPEDEF_NAME             
    { {       292}, {  35} }, // CONST                    
    { {       293}, {  36} }, // RESTRICT                 
    { {       294}, {  37} }, // VOLATILE                 
    { {       325}, {  38} }, // ATOMIC                   
    { {       291}, {  39} }, // INLINE                   
    { {       327}, {  40} }, // NORETURN                 
    { {       323}, {  41} }, // ALIGNAS                  
    { {       336}, { 169} }, // assignment_expression    
    { {       374}, {  42} }, // struct_or_union          
    { {       309}, {  43} }, // ENUM                     
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       307}, {  44} }, // STRUCT                   
    { {       308}, {  45} }, // UNION                    
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_73[] =
{
    { { REQ_TOKEN}, {  10} },                        
    { {        59}, {  48} }, // ';'                 
    { {       361}, {  49} }, // init_declarator_list
    { {       368}, {  52} }, // init_declarator     
    { {       369}, { 170} }, // declarator          
    { {       382}, {  50} }, // pointer             
    { {       383}, {  51} }, // direct_declarator   
    { {        42}, {  53} }, // '*'                 
    { {       257}, {  54} }, // IDENTIFIER          
    { {        40}, {  55} }, // '('                 
    { {         0}, {   0} },                        
};

SR__ s_74[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -90} }, 
};

SR__ s_75[] =
{
    { { REQ_TOKEN}, {   8} },                     
    { {       368}, { 171} }, // init_declarator  
    { {       369}, { 170} }, // declarator       
    { {       382}, {  50} }, // pointer          
    { {       383}, {  51} }, // direct_declarator
    { {        42}, {  53} }, // '*'              
    { {       257}, {  54} }, // IDENTIFIER       
    { {        40}, {  55} }, // '('              
    { {         0}, {   0} },                     
};

SR__ s_76[] =
{
    { { REQ_DEF}, {    3} },       
    { {      91}, {   77} }, // '['
    { {      40}, {   78} }, // '('
    { {       0}, { -165} },       
};

SR__ s_77[] =
{
    { { REQ_TOKEN}, {  46} },                             
    { {        93}, { 172} }, // ']'                      
    { {        42}, { 173} }, // '*'                      
    { {       288}, { 174} }, // STATIC                   
    { {       384}, { 175} }, // type_qualifier_list      
    { {       336}, { 176} }, // assignment_expression    
    { {       365}, {  81} }, // type_qualifier           
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       292}, {  35} }, // CONST                    
    { {       293}, {  36} }, // RESTRICT                 
    { {       294}, {  37} }, // VOLATILE                 
    { {       325}, {  82} }, // ATOMIC                   
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_78[] =
{
    { { REQ_TOKEN}, {  46} },                             
    { {       385}, { 177} }, // parameter_type_list      
    { {        41}, { 178} }, // ')'                      
    { {       386}, { 179} }, // identifier_list          
    { {       387}, { 180} }, // parameter_list           
    { {       257}, { 181} }, // IDENTIFIER               
    { {       388}, { 182} }, // parameter_declaration    
    { {       360}, { 183} }, // declaration_specifiers   
    { {       363}, {   7} }, // storage_class_specifier  
    { {       364}, {   8} }, // type_specifier           
    { {       365}, {   9} }, // type_qualifier           
    { {       366}, {  10} }, // function_specifier       
    { {       367}, {  11} }, // alignment_specifier      
    { {       286}, {  13} }, // TYPEDEF                  
    { {       287}, {  14} }, // EXTERN                   
    { {       288}, {  15} }, // STATIC                   
    { {       329}, {  16} }, // THREAD_LOCAL             
    { {       289}, {  17} }, // AUTO                     
    { {       290}, {  18} }, // REGISTER                 
    { {       304}, {  19} }, // VOID                     
    { {       296}, {  20} }, // CHAR                     
    { {       297}, {  21} }, // SHORT                    
    { {       298}, {  22} }, // INT                      
    { {       299}, {  23} }, // LONG                     
    { {       302}, {  24} }, // FLOAT                    
    { {       303}, {  25} }, // DOUBLE                   
    { {       300}, {  26} }, // SIGNED                   
    { {       301}, {  27} }, // UNSIGNED                 
    { {       295}, {  28} }, // BOOL                     
    { {       305}, {  29} }, // COMPLEX                  
    { {       306}, {  30} }, // IMAGINARY                
    { {       371}, {  31} }, // atomic_type_specifier    
    { {       372}, {  32} }, // struct_or_union_specifier
    { {       373}, {  33} }, // enum_specifier           
    { {       284}, {  34} }, // TYPEDEF_NAME             
    { {       292}, {  35} }, // CONST                    
    { {       293}, {  36} }, // RESTRICT                 
    { {       294}, {  37} }, // VOLATILE                 
    { {       325}, {  38} }, // ATOMIC                   
    { {       291}, {  39} }, // INLINE                   
    { {       327}, {  40} }, // NORETURN                 
    { {       323}, {  41} }, // ALIGNAS                  
    { {       374}, {  42} }, // struct_or_union          
    { {       309}, {  43} }, // ENUM                     
    { {       307}, {  44} }, // STRUCT                   
    { {       308}, {  45} }, // UNION                    
    { {         0}, {   0} },                             
};

SR__ s_79[] =
{
    { { REQ_DEF}, {    8} },                  
    { {     382}, {  184} }, // pointer       
    { {     365}, {  185} }, // type_qualifier
    { {      42}, {   53} }, // '*'           
    { {     292}, {   35} }, // CONST         
    { {     293}, {   36} }, // RESTRICT      
    { {     294}, {   37} }, // VOLATILE      
    { {     325}, {   82} }, // ATOMIC        
    { {       0}, { -182} },                  
};

SR__ s_80[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -183} }, 
};

SR__ s_81[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -185} }, 
};

SR__ s_82[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -160} }, 
};

SR__ s_83[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 186} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_84[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        44}, { 187} }, // ','
    { {         0}, {   0} },       
};

SR__ s_85[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -88} }, 
};

SR__ s_86[] =
{
    { { REQ_DEF}, {   3} },         
    { {      63}, { 188} }, // '?'  
    { {     273}, { 189} }, // OR_OP
    { {       0}, { -71} },         
};

SR__ s_87[] =
{
    { { REQ_DEF}, {   2} },          
    { {     272}, { 190} }, // AND_OP
    { {       0}, { -69} },          
};

SR__ s_88[] =
{
    { { REQ_DEF}, {   2} },       
    { {     124}, { 191} }, // '|'
    { {       0}, { -67} },       
};

SR__ s_89[] =
{
    { { REQ_DEF}, {   2} },       
    { {      94}, { 192} }, // '^'
    { {       0}, { -65} },       
};

SR__ s_90[] =
{
    { { REQ_DEF}, {   2} },       
    { {      38}, { 193} }, // '&'
    { {       0}, { -63} },       
};

SR__ s_91[] =
{
    { { REQ_DEF}, {   3} },         
    { {     270}, { 194} }, // EQ_OP
    { {     271}, { 195} }, // NE_OP
    { {       0}, { -61} },         
};

SR__ s_92[] =
{
    { { REQ_DEF}, {   5} },         
    { {      60}, { 196} }, // '<'  
    { {      62}, { 197} }, // '>'  
    { {     268}, { 198} }, // LE_OP
    { {     269}, { 199} }, // GE_OP
    { {       0}, { -58} },         
};

SR__ s_93[] =
{
    { { REQ_DEF}, {   3} },            
    { {     266}, { 200} }, // LEFT_OP 
    { {     267}, { 201} }, // RIGHT_OP
    { {       0}, { -53} },            
};

SR__ s_94[] =
{
    { { REQ_DEF}, {   3} },       
    { {      43}, { 202} }, // '+'
    { {      45}, { 203} }, // '-'
    { {       0}, { -50} },       
};

SR__ s_95[] =
{
    { { REQ_DEF}, {   4} },       
    { {      42}, { 204} }, // '*'
    { {      47}, { 205} }, // '/'
    { {      37}, { 206} }, // '%'
    { {       0}, { -47} },       
};

SR__ s_96[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -43} }, 
};

SR__ s_97[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -41} }, 
};

SR__ s_98[] =
{
    { { REQ_TOKEN}, {  67} },                             
    { {       339}, { 207} }, // type_name                
    { {       333}, { 208} }, // expression               
    { {       377}, { 122} }, // specifier_qualifier_list 
    { {       336}, { 169} }, // assignment_expression    
    { {       364}, { 123} }, // type_specifier           
    { {       365}, { 124} }, // type_qualifier           
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       304}, {  19} }, // VOID                     
    { {       296}, {  20} }, // CHAR                     
    { {       297}, {  21} }, // SHORT                    
    { {       298}, {  22} }, // INT                      
    { {       299}, {  23} }, // LONG                     
    { {       302}, {  24} }, // FLOAT                    
    { {       303}, {  25} }, // DOUBLE                   
    { {       300}, {  26} }, // SIGNED                   
    { {       301}, {  27} }, // UNSIGNED                 
    { {       295}, {  28} }, // BOOL                     
    { {       305}, {  29} }, // COMPLEX                  
    { {       306}, {  30} }, // IMAGINARY                
    { {       371}, {  31} }, // atomic_type_specifier    
    { {       372}, {  32} }, // struct_or_union_specifier
    { {       373}, {  33} }, // enum_specifier           
    { {       284}, {  34} }, // TYPEDEF_NAME             
    { {       292}, {  35} }, // CONST                    
    { {       293}, {  36} }, // RESTRICT                 
    { {       294}, {  37} }, // VOLATILE                 
    { {       325}, {  38} }, // ATOMIC                   
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       374}, {  42} }, // struct_or_union          
    { {       309}, {  43} }, // ENUM                     
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       307}, {  44} }, // STRUCT                   
    { {       308}, {  45} }, // UNION                    
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_99[] =
{
    { { REQ_DEF}, {   7} },          
    { {      91}, { 209} }, // '['   
    { {      40}, { 210} }, // '('   
    { {      46}, { 211} }, // '.'   
    { {     263}, { 212} }, // PTR_OP
    { {     264}, { 213} }, // INC_OP
    { {     265}, { 214} }, // DEC_OP
    { {       0}, { -28} },          
};

SR__ s_100[] =
{
    { { REQ_TOKEN}, {  25} },                        
    { {       343}, { 215} }, // unary_expression    
    { {       340}, {  99} }, // postfix_expression  
    { {       264}, { 100} }, // INC_OP              
    { {       265}, { 101} }, // DEC_OP              
    { {       344}, { 102} }, // unary_operator      
    { {       262}, { 103} }, // SIZEOF              
    { {       324}, { 104} }, // ALIGNOF             
    { {       330}, { 105} }, // primary_expression  
    { {        40}, { 216} }, // '('                 
    { {        38}, { 106} }, // '&'                 
    { {        42}, { 107} }, // '*'                 
    { {        43}, { 108} }, // '+'                 
    { {        45}, { 109} }, // '-'                 
    { {       126}, { 110} }, // '~'                 
    { {        33}, { 111} }, // '!'                 
    { {       257}, { 112} }, // IDENTIFIER          
    { {       331}, { 113} }, // constant            
    { {       332}, { 114} }, // string              
    { {       334}, { 115} }, // generic_selection   
    { {       258}, { 116} }, // I_CONSTANT          
    { {       259}, { 117} }, // F_CONSTANT          
    { {       285}, { 118} }, // ENUMERATION_CONSTANT
    { {       260}, { 119} }, // STRING_LITERAL      
    { {       326}, { 120} }, // GENERIC             
    { {         0}, {   0} },                        
};

SR__ s_101[] =
{
    { { REQ_TOKEN}, {  25} },                        
    { {       343}, { 217} }, // unary_expression    
    { {       340}, {  99} }, // postfix_expression  
    { {       264}, { 100} }, // INC_OP              
    { {       265}, { 101} }, // DEC_OP              
    { {       344}, { 102} }, // unary_operator      
    { {       262}, { 103} }, // SIZEOF              
    { {       324}, { 104} }, // ALIGNOF             
    { {       330}, { 105} }, // primary_expression  
    { {        40}, { 216} }, // '('                 
    { {        38}, { 106} }, // '&'                 
    { {        42}, { 107} }, // '*'                 
    { {        43}, { 108} }, // '+'                 
    { {        45}, { 109} }, // '-'                 
    { {       126}, { 110} }, // '~'                 
    { {        33}, { 111} }, // '!'                 
    { {       257}, { 112} }, // IDENTIFIER          
    { {       331}, { 113} }, // constant            
    { {       332}, { 114} }, // string              
    { {       334}, { 115} }, // generic_selection   
    { {       258}, { 116} }, // I_CONSTANT          
    { {       259}, { 117} }, // F_CONSTANT          
    { {       285}, { 118} }, // ENUMERATION_CONSTANT
    { {       260}, { 119} }, // STRING_LITERAL      
    { {       326}, { 120} }, // GENERIC             
    { {         0}, {   0} },                        
};

SR__ s_102[] =
{
    { { REQ_TOKEN}, {  26} },                        
    { {       345}, { 218} }, // cast_expression     
    { {       343}, {  97} }, // unary_expression    
    { {        40}, {  98} }, // '('                 
    { {       340}, {  99} }, // postfix_expression  
    { {       264}, { 100} }, // INC_OP              
    { {       265}, { 101} }, // DEC_OP              
    { {       344}, { 102} }, // unary_operator      
    { {       262}, { 103} }, // SIZEOF              
    { {       324}, { 104} }, // ALIGNOF             
    { {       330}, { 105} }, // primary_expression  
    { {        38}, { 106} }, // '&'                 
    { {        42}, { 107} }, // '*'                 
    { {        43}, { 108} }, // '+'                 
    { {        45}, { 109} }, // '-'                 
    { {       126}, { 110} }, // '~'                 
    { {        33}, { 111} }, // '!'                 
    { {       257}, { 112} }, // IDENTIFIER          
    { {       331}, { 113} }, // constant            
    { {       332}, { 114} }, // string              
    { {       334}, { 115} }, // generic_selection   
    { {       258}, { 116} }, // I_CONSTANT          
    { {       259}, { 117} }, // F_CONSTANT          
    { {       285}, { 118} }, // ENUMERATION_CONSTANT
    { {       260}, { 119} }, // STRING_LITERAL      
    { {       326}, { 120} }, // GENERIC             
    { {         0}, {   0} },                        
};

SR__ s_103[] =
{
    { { REQ_TOKEN}, {  25} },                        
    { {       343}, { 219} }, // unary_expression    
    { {        40}, { 220} }, // '('                 
    { {       340}, {  99} }, // postfix_expression  
    { {       264}, { 100} }, // INC_OP              
    { {       265}, { 101} }, // DEC_OP              
    { {       344}, { 102} }, // unary_operator      
    { {       262}, { 103} }, // SIZEOF              
    { {       324}, { 104} }, // ALIGNOF             
    { {       330}, { 105} }, // primary_expression  
    { {        38}, { 106} }, // '&'                 
    { {        42}, { 107} }, // '*'                 
    { {        43}, { 108} }, // '+'                 
    { {        45}, { 109} }, // '-'                 
    { {       126}, { 110} }, // '~'                 
    { {        33}, { 111} }, // '!'                 
    { {       257}, { 112} }, // IDENTIFIER          
    { {       331}, { 113} }, // constant            
    { {       332}, { 114} }, // string              
    { {       334}, { 115} }, // generic_selection   
    { {       258}, { 116} }, // I_CONSTANT          
    { {       259}, { 117} }, // F_CONSTANT          
    { {       285}, { 118} }, // ENUMERATION_CONSTANT
    { {       260}, { 119} }, // STRING_LITERAL      
    { {       326}, { 120} }, // GENERIC             
    { {         0}, {   0} },                        
};

SR__ s_104[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 221} }, // '('
    { {         0}, {   0} },       
};

SR__ s_105[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ s_106[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};

SR__ s_107[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -36} }, 
};

SR__ s_108[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -37} }, 
};

SR__ s_109[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -38} }, 
};

SR__ s_110[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -39} }, 
};

SR__ s_111[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -40} }, 
};

SR__ s_112[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -1} }, 
};

SR__ s_113[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -2} }, 
};

SR__ s_114[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR__ s_115[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR__ s_116[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -6} }, 
};

SR__ s_117[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR__ s_118[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};

SR__ s_119[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR__ s_120[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 222} }, // '('
    { {         0}, {   0} },       
};

SR__ s_121[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 223} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_122[] =
{
    { { REQ_DEF}, {    7} },                              
    { {     389}, {  224} }, // abstract_declarator       
    { {     382}, {  225} }, // pointer                   
    { {     390}, {  226} }, // direct_abstract_declarator
    { {      42}, {   53} }, // '*'                       
    { {      40}, {  227} }, // '('                       
    { {      91}, {  228} }, // '['                       
    { {       0}, { -197} },                              
};

SR__ s_123[] =
{
    { { REQ_DEF}, {   28} },                             
    { {     377}, {  229} }, // specifier_qualifier_list 
    { {     364}, {  123} }, // type_specifier           
    { {     365}, {  124} }, // type_qualifier           
    { {     304}, {   19} }, // VOID                     
    { {     296}, {   20} }, // CHAR                     
    { {     297}, {   21} }, // SHORT                    
    { {     298}, {   22} }, // INT                      
    { {     299}, {   23} }, // LONG                     
    { {     302}, {   24} }, // FLOAT                    
    { {     303}, {   25} }, // DOUBLE                   
    { {     300}, {   26} }, // SIGNED                   
    { {     301}, {   27} }, // UNSIGNED                 
    { {     295}, {   28} }, // BOOL                     
    { {     305}, {   29} }, // COMPLEX                  
    { {     306}, {   30} }, // IMAGINARY                
    { {     371}, {   31} }, // atomic_type_specifier    
    { {     372}, {   32} }, // struct_or_union_specifier
    { {     373}, {   33} }, // enum_specifier           
    { {     284}, {   34} }, // TYPEDEF_NAME             
    { {     292}, {   35} }, // CONST                    
    { {     293}, {   36} }, // RESTRICT                 
    { {     294}, {   37} }, // VOLATILE                 
    { {     325}, {   38} }, // ATOMIC                   
    { {     374}, {   42} }, // struct_or_union          
    { {     309}, {   43} }, // ENUM                     
    { {     307}, {   44} }, // STRUCT                   
    { {     308}, {   45} }, // UNION                    
    { {       0}, { -139} },                             
};

SR__ s_124[] =
{
    { { REQ_DEF}, {   28} },                             
    { {     377}, {  230} }, // specifier_qualifier_list 
    { {     364}, {  123} }, // type_specifier           
    { {     365}, {  124} }, // type_qualifier           
    { {     304}, {   19} }, // VOID                     
    { {     296}, {   20} }, // CHAR                     
    { {     297}, {   21} }, // SHORT                    
    { {     298}, {   22} }, // INT                      
    { {     299}, {   23} }, // LONG                     
    { {     302}, {   24} }, // FLOAT                    
    { {     303}, {   25} }, // DOUBLE                   
    { {     300}, {   26} }, // SIGNED                   
    { {     301}, {   27} }, // UNSIGNED                 
    { {     295}, {   28} }, // BOOL                     
    { {     305}, {   29} }, // COMPLEX                  
    { {     306}, {   30} }, // IMAGINARY                
    { {     371}, {   31} }, // atomic_type_specifier    
    { {     372}, {   32} }, // struct_or_union_specifier
    { {     373}, {   33} }, // enum_specifier           
    { {     284}, {   34} }, // TYPEDEF_NAME             
    { {     292}, {   35} }, // CONST                    
    { {     293}, {   36} }, // RESTRICT                 
    { {     294}, {   37} }, // VOLATILE                 
    { {     325}, {   38} }, // ATOMIC                   
    { {     374}, {   42} }, // struct_or_union          
    { {     309}, {   43} }, // ENUM                     
    { {     307}, {   44} }, // STRUCT                   
    { {     308}, {   45} }, // UNION                    
    { {       0}, { -141} },                             
};

SR__ s_125[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 231} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_126[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 232} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_127[] =
{
    { { REQ_TOKEN}, {  32} },                             
    { {       125}, { 233} }, // '}'                      
    { {       376}, { 234} }, // struct_declaration       
    { {       377}, { 129} }, // specifier_qualifier_list 
    { {       362}, { 130} }, // static_assert_declaration
    { {       364}, { 123} }, // type_specifier           
    { {       365}, { 124} }, // type_qualifier           
    { {       328}, {  12} }, // STATIC_ASSERT            
    { {       304}, {  19} }, // VOID                     
    { {       296}, {  20} }, // CHAR                     
    { {       297}, {  21} }, // SHORT                    
    { {       298}, {  22} }, // INT                      
    { {       299}, {  23} }, // LONG                     
    { {       302}, {  24} }, // FLOAT                    
    { {       303}, {  25} }, // DOUBLE                   
    { {       300}, {  26} }, // SIGNED                   
    { {       301}, {  27} }, // UNSIGNED                 
    { {       295}, {  28} }, // BOOL                     
    { {       305}, {  29} }, // COMPLEX                  
    { {       306}, {  30} }, // IMAGINARY                
    { {       371}, {  31} }, // atomic_type_specifier    
    { {       372}, {  32} }, // struct_or_union_specifier
    { {       373}, {  33} }, // enum_specifier           
    { {       284}, {  34} }, // TYPEDEF_NAME             
    { {       292}, {  35} }, // CONST                    
    { {       293}, {  36} }, // RESTRICT                 
    { {       294}, {  37} }, // VOLATILE                 
    { {       325}, {  38} }, // ATOMIC                   
    { {       374}, {  42} }, // struct_or_union          
    { {       309}, {  43} }, // ENUM                     
    { {       307}, {  44} }, // STRUCT                   
    { {       308}, {  45} }, // UNION                    
    { {         0}, {   0} },                             
};

SR__ s_128[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -133} }, 
};

SR__ s_129[] =
{
    { { REQ_TOKEN}, {  11} },                          
    { {        59}, { 235} }, // ';'                   
    { {       378}, { 236} }, // struct_declarator_list
    { {       379}, { 237} }, // struct_declarator     
    { {        58}, { 238} }, // ':'                   
    { {       369}, { 239} }, // declarator            
    { {       382}, {  50} }, // pointer               
    { {       383}, {  51} }, // direct_declarator     
    { {        42}, {  53} }, // '*'                   
    { {       257}, {  54} }, // IDENTIFIER            
    { {        40}, {  55} }, // '('                   
    { {         0}, {   0} },                          
};

SR__ s_130[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -137} }, 
};

SR__ s_131[] =
{
    { { REQ_TOKEN}, {  32} },                             
    { {       375}, { 240} }, // struct_declaration_list  
    { {       376}, { 128} }, // struct_declaration       
    { {       377}, { 129} }, // specifier_qualifier_list 
    { {       362}, { 130} }, // static_assert_declaration
    { {       364}, { 123} }, // type_specifier           
    { {       365}, { 124} }, // type_qualifier           
    { {       328}, {  12} }, // STATIC_ASSERT            
    { {       304}, {  19} }, // VOID                     
    { {       296}, {  20} }, // CHAR                     
    { {       297}, {  21} }, // SHORT                    
    { {       298}, {  22} }, // INT                      
    { {       299}, {  23} }, // LONG                     
    { {       302}, {  24} }, // FLOAT                    
    { {       303}, {  25} }, // DOUBLE                   
    { {       300}, {  26} }, // SIGNED                   
    { {       301}, {  27} }, // UNSIGNED                 
    { {       295}, {  28} }, // BOOL                     
    { {       305}, {  29} }, // COMPLEX                  
    { {       306}, {  30} }, // IMAGINARY                
    { {       371}, {  31} }, // atomic_type_specifier    
    { {       372}, {  32} }, // struct_or_union_specifier
    { {       373}, {  33} }, // enum_specifier           
    { {       284}, {  34} }, // TYPEDEF_NAME             
    { {       292}, {  35} }, // CONST                    
    { {       293}, {  36} }, // RESTRICT                 
    { {       294}, {  37} }, // VOLATILE                 
    { {       325}, {  38} }, // ATOMIC                   
    { {       374}, {  42} }, // struct_or_union          
    { {       309}, {  43} }, // ENUM                     
    { {       307}, {  44} }, // STRUCT                   
    { {       308}, {  45} }, // UNION                    
    { {         0}, {   0} },                             
};

SR__ s_132[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {       125}, { 241} }, // '}'
    { {        44}, { 242} }, // ','
    { {         0}, {   0} },       
};

SR__ s_133[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -152} }, 
};

SR__ s_134[] =
{
    { { REQ_DEF}, {    2} },       
    { {      61}, {  243} }, // '='
    { {       0}, { -155} },       
};

SR__ s_135[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR__ s_136[] =
{
    { { REQ_TOKEN}, {   5} },                        
    { {       380}, { 244} }, // enumerator_list     
    { {       381}, { 133} }, // enumerator          
    { {       335}, { 134} }, // enumeration_constant
    { {       257}, { 135} }, // IDENTIFIER          
    { {         0}, {   0} },                        
};

SR__ s_137[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -270} }, 
};

SR__ s_138[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -273} }, 
};

SR__ s_139[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -104} }, 
};

SR__ s_140[] =
{
    { { REQ_TOKEN}, {  46} },                             
    { {       342}, { 245} }, // initializer_list         
    { {       391}, { 246} }, // designation              
    { {       370}, { 247} }, // initializer              
    { {       392}, { 248} }, // designator_list          
    { {       123}, { 140} }, // '{'                      
    { {       336}, { 141} }, // assignment_expression    
    { {       393}, { 249} }, // designator               
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {        91}, { 250} }, // '['                      
    { {        46}, { 251} }, // '.'                      
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_141[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -224} }, 
};

SR__ s_142[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -73} }, 
};

SR__ s_143[] =
{
    { { REQ_DEF}, {  13} },                       
    { {     357}, { 252} }, // assignment_operator
    { {      61}, { 253} }, // '='                
    { {     274}, { 254} }, // MUL_ASSIGN         
    { {     275}, { 255} }, // DIV_ASSIGN         
    { {     276}, { 256} }, // MOD_ASSIGN         
    { {     277}, { 257} }, // ADD_ASSIGN         
    { {     278}, { 258} }, // SUB_ASSIGN         
    { {     279}, { 259} }, // LEFT_ASSIGN        
    { {     280}, { 260} }, // RIGHT_ASSIGN       
    { {     281}, { 261} }, // AND_ASSIGN         
    { {     282}, { 262} }, // XOR_ASSIGN         
    { {     283}, { 263} }, // OR_ASSIGN          
    { {       0}, { -41} },                       
};

SR__ s_144[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -244} }, 
};

SR__ s_145[] =
{
    { { REQ_TOKEN}, { 103} },                             
    { {       125}, { 264} }, // '}'                      
    { {       402}, { 265} }, // block_item               
    { {       359}, { 147} }, // declaration              
    { {       394}, { 148} }, // statement                
    { {       360}, {  73} }, // declaration_specifiers   
    { {       362}, {   6} }, // static_assert_declaration
    { {       395}, { 149} }, // labeled_statement        
    { {       396}, { 150} }, // compound_statement       
    { {       397}, { 151} }, // expression_statement     
    { {       398}, { 152} }, // selection_statement      
    { {       399}, { 153} }, // iteration_statement      
    { {       400}, { 154} }, // jump_statement           
    { {       363}, {   7} }, // storage_class_specifier  
    { {       364}, {   8} }, // type_specifier           
    { {       365}, {   9} }, // type_qualifier           
    { {       366}, {  10} }, // function_specifier       
    { {       367}, {  11} }, // alignment_specifier      
    { {       328}, {  12} }, // STATIC_ASSERT            
    { {       257}, { 155} }, // IDENTIFIER               
    { {       311}, { 156} }, // CASE                     
    { {       312}, { 157} }, // DEFAULT                  
    { {       123}, {  72} }, // '{'                      
    { {        59}, { 158} }, // ';'                      
    { {       333}, { 159} }, // expression               
    { {       313}, { 160} }, // IF                       
    { {       315}, { 161} }, // SWITCH                   
    { {       316}, { 162} }, // WHILE                    
    { {       317}, { 163} }, // DO                       
    { {       318}, { 164} }, // FOR                      
    { {       319}, { 165} }, // GOTO                     
    { {       320}, { 166} }, // CONTINUE                 
    { {       321}, { 167} }, // BREAK                    
    { {       322}, { 168} }, // RETURN                   
    { {       286}, {  13} }, // TYPEDEF                  
    { {       287}, {  14} }, // EXTERN                   
    { {       288}, {  15} }, // STATIC                   
    { {       329}, {  16} }, // THREAD_LOCAL             
    { {       289}, {  17} }, // AUTO                     
    { {       290}, {  18} }, // REGISTER                 
    { {       304}, {  19} }, // VOID                     
    { {       296}, {  20} }, // CHAR                     
    { {       297}, {  21} }, // SHORT                    
    { {       298}, {  22} }, // INT                      
    { {       299}, {  23} }, // LONG                     
    { {       302}, {  24} }, // FLOAT                    
    { {       303}, {  25} }, // DOUBLE                   
    { {       300}, {  26} }, // SIGNED                   
    { {       301}, {  27} }, // UNSIGNED                 
    { {       295}, {  28} }, // BOOL                     
    { {       305}, {  29} }, // COMPLEX                  
    { {       306}, {  30} }, // IMAGINARY                
    { {       371}, {  31} }, // atomic_type_specifier    
    { {       372}, {  32} }, // struct_or_union_specifier
    { {       373}, {  33} }, // enum_specifier           
    { {       284}, {  34} }, // TYPEDEF_NAME             
    { {       292}, {  35} }, // CONST                    
    { {       293}, {  36} }, // RESTRICT                 
    { {       294}, {  37} }, // VOLATILE                 
    { {       325}, {  38} }, // ATOMIC                   
    { {       291}, {  39} }, // INLINE                   
    { {       327}, {  40} }, // NORETURN                 
    { {       323}, {  41} }, // ALIGNAS                  
    { {       336}, { 169} }, // assignment_expression    
    { {       374}, {  42} }, // struct_or_union          
    { {       309}, {  43} }, // ENUM                     
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       307}, {  44} }, // STRUCT                   
    { {       308}, {  45} }, // UNION                    
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_146[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -246} }, 
};

SR__ s_147[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -248} }, 
};

SR__ s_148[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -249} }, 
};

SR__ s_149[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -235} }, 
};

SR__ s_150[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -236} }, 
};

SR__ s_151[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -237} }, 
};

SR__ s_152[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -238} }, 
};

SR__ s_153[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -239} }, 
};

SR__ s_154[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -240} }, 
};

SR__ s_155[] =
{
    { { REQ_DEF}, {   2} },       
    { {      58}, { 266} }, // ':'
    { {       0}, {  -1} },       
};

SR__ s_156[] =
{
    { { REQ_TOKEN}, {  38} },                             
    { {       358}, { 267} }, // constant_expression      
    { {       356}, {  85} }, // conditional_expression   
    { {       355}, {  86} }, // logical_or_expression    
    { {       354}, {  87} }, // logical_and_expression   
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {       343}, {  97} }, // unary_expression         
    { {        40}, {  98} }, // '('                      
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       330}, { 105} }, // primary_expression       
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {         0}, {   0} },                             
};

SR__ s_157[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        58}, { 268} }, // ':'
    { {         0}, {   0} },       
};

SR__ s_158[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -250} }, 
};

SR__ s_159[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        59}, { 269} }, // ';'
    { {        44}, { 270} }, // ','
    { {         0}, {   0} },       
};

SR__ s_160[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 271} }, // '('
    { {         0}, {   0} },       
};

SR__ s_161[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 272} }, // '('
    { {         0}, {   0} },       
};

SR__ s_162[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 273} }, // '('
    { {         0}, {   0} },       
};

SR__ s_163[] =
{
    { { REQ_TOKEN}, {  59} },                             
    { {       394}, { 274} }, // statement                
    { {       395}, { 149} }, // labeled_statement        
    { {       396}, { 150} }, // compound_statement       
    { {       397}, { 151} }, // expression_statement     
    { {       398}, { 152} }, // selection_statement      
    { {       399}, { 153} }, // iteration_statement      
    { {       400}, { 154} }, // jump_statement           
    { {       257}, { 155} }, // IDENTIFIER               
    { {       311}, { 156} }, // CASE                     
    { {       312}, { 157} }, // DEFAULT                  
    { {       123}, {  72} }, // '{'                      
    { {        59}, { 158} }, // ';'                      
    { {       333}, { 159} }, // expression               
    { {       313}, { 160} }, // IF                       
    { {       315}, { 161} }, // SWITCH                   
    { {       316}, { 162} }, // WHILE                    
    { {       317}, { 163} }, // DO                       
    { {       318}, { 164} }, // FOR                      
    { {       319}, { 165} }, // GOTO                     
    { {       320}, { 166} }, // CONTINUE                 
    { {       321}, { 167} }, // BREAK                    
    { {       322}, { 168} }, // RETURN                   
    { {       336}, { 169} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_164[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 275} }, // '('
    { {         0}, {   0} },       
};

SR__ s_165[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       257}, { 276} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_166[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 277} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_167[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 278} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_168[] =
{
    { { REQ_TOKEN}, {  40} },                             
    { {        59}, { 279} }, // ';'                      
    { {       333}, { 280} }, // expression               
    { {       336}, { 169} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_169[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -86} }, 
};

SR__ s_170[] =
{
    { { REQ_DEF}, {    2} },       
    { {      61}, {   70} }, // '='
    { {       0}, { -105} },       
};

SR__ s_171[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -103} }, 
};

SR__ s_172[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -169} }, 
};

SR__ s_173[] =
{
    { { REQ_DEF}, {   2} },       
    { {      93}, { 281} }, // ']'
    { {       0}, { -36} },       
};

SR__ s_174[] =
{
    { { REQ_TOKEN}, {  44} },                             
    { {       384}, { 282} }, // type_qualifier_list      
    { {       336}, { 283} }, // assignment_expression    
    { {       365}, {  81} }, // type_qualifier           
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       292}, {  35} }, // CONST                    
    { {       293}, {  36} }, // RESTRICT                 
    { {       294}, {  37} }, // VOLATILE                 
    { {       325}, {  82} }, // ATOMIC                   
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_175[] =
{
    { { REQ_TOKEN}, {  45} },                             
    { {        42}, { 284} }, // '*'                      
    { {       288}, { 285} }, // STATIC                   
    { {       336}, { 286} }, // assignment_expression    
    { {        93}, { 287} }, // ']'                      
    { {       365}, { 185} }, // type_qualifier           
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       292}, {  35} }, // CONST                    
    { {       293}, {  36} }, // RESTRICT                 
    { {       294}, {  37} }, // VOLATILE                 
    { {       325}, {  82} }, // ATOMIC                   
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_176[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        93}, { 288} }, // ']'
    { {         0}, {   0} },       
};

SR__ s_177[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 289} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_178[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -179} }, 
};

SR__ s_179[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 290} }, // ')'
    { {        44}, { 291} }, // ','
    { {         0}, {   0} },       
};

SR__ s_180[] =
{
    { { REQ_DEF}, {    2} },       
    { {      44}, {  292} }, // ','
    { {       0}, { -188} },       
};

SR__ s_181[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -194} }, 
};

SR__ s_182[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -189} }, 
};

SR__ s_183[] =
{
    { { REQ_DEF}, {   10} },                              
    { {     369}, {  293} }, // declarator                
    { {     389}, {  294} }, // abstract_declarator       
    { {     382}, {  295} }, // pointer                   
    { {     383}, {   51} }, // direct_declarator         
    { {     390}, {  226} }, // direct_abstract_declarator
    { {      42}, {   53} }, // '*'                       
    { {     257}, {   54} }, // IDENTIFIER                
    { {      40}, {  296} }, // '('                       
    { {      91}, {  228} }, // '['                       
    { {       0}, { -193} },                              
};

SR__ s_184[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -181} }, 
};

SR__ s_185[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -186} }, 
};

SR__ s_186[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -168} }, 
};

SR__ s_187[] =
{
    { { REQ_TOKEN}, {   2} },                  
    { {       260}, { 297} }, // STRING_LITERAL
    { {         0}, {   0} },                  
};

SR__ s_188[] =
{
    { { REQ_TOKEN}, {  39} },                             
    { {       333}, { 298} }, // expression               
    { {       336}, { 169} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_189[] =
{
    { { REQ_TOKEN}, {  35} },                             
    { {       354}, { 299} }, // logical_and_expression   
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {       343}, {  97} }, // unary_expression         
    { {        40}, {  98} }, // '('                      
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       330}, { 105} }, // primary_expression       
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {         0}, {   0} },                             
};

SR__ s_190[] =
{
    { { REQ_TOKEN}, {  34} },                             
    { {       353}, { 300} }, // inclusive_or_expression  
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {       343}, {  97} }, // unary_expression         
    { {        40}, {  98} }, // '('                      
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       330}, { 105} }, // primary_expression       
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {         0}, {   0} },                             
};

SR__ s_191[] =
{
    { { REQ_TOKEN}, {  33} },                             
    { {       352}, { 301} }, // exclusive_or_expression  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {       343}, {  97} }, // unary_expression         
    { {        40}, {  98} }, // '('                      
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       330}, { 105} }, // primary_expression       
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {         0}, {   0} },                             
};

SR__ s_192[] =
{
    { { REQ_TOKEN}, {  32} },                             
    { {       351}, { 302} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {       343}, {  97} }, // unary_expression         
    { {        40}, {  98} }, // '('                      
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       330}, { 105} }, // primary_expression       
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {         0}, {   0} },                             
};

SR__ s_193[] =
{
    { { REQ_TOKEN}, {  31} },                             
    { {       350}, { 303} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {       343}, {  97} }, // unary_expression         
    { {        40}, {  98} }, // '('                      
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       330}, { 105} }, // primary_expression       
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {         0}, {   0} },                             
};

SR__ s_194[] =
{
    { { REQ_TOKEN}, {  30} },                             
    { {       349}, { 304} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {       343}, {  97} }, // unary_expression         
    { {        40}, {  98} }, // '('                      
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       330}, { 105} }, // primary_expression       
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {         0}, {   0} },                             
};

SR__ s_195[] =
{
    { { REQ_TOKEN}, {  30} },                             
    { {       349}, { 305} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {       343}, {  97} }, // unary_expression         
    { {        40}, {  98} }, // '('                      
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       330}, { 105} }, // primary_expression       
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {         0}, {   0} },                             
};

SR__ s_196[] =
{
    { { REQ_TOKEN}, {  29} },                             
    { {       348}, { 306} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {       343}, {  97} }, // unary_expression         
    { {        40}, {  98} }, // '('                      
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       330}, { 105} }, // primary_expression       
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {         0}, {   0} },                             
};

SR__ s_197[] =
{
    { { REQ_TOKEN}, {  29} },                             
    { {       348}, { 307} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {       343}, {  97} }, // unary_expression         
    { {        40}, {  98} }, // '('                      
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       330}, { 105} }, // primary_expression       
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {         0}, {   0} },                             
};

SR__ s_198[] =
{
    { { REQ_TOKEN}, {  29} },                             
    { {       348}, { 308} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {       343}, {  97} }, // unary_expression         
    { {        40}, {  98} }, // '('                      
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       330}, { 105} }, // primary_expression       
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {         0}, {   0} },                             
};

SR__ s_199[] =
{
    { { REQ_TOKEN}, {  29} },                             
    { {       348}, { 309} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {       343}, {  97} }, // unary_expression         
    { {        40}, {  98} }, // '('                      
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       330}, { 105} }, // primary_expression       
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {         0}, {   0} },                             
};

SR__ s_200[] =
{
    { { REQ_TOKEN}, {  28} },                             
    { {       347}, { 310} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {       343}, {  97} }, // unary_expression         
    { {        40}, {  98} }, // '('                      
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       330}, { 105} }, // primary_expression       
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {         0}, {   0} },                             
};

SR__ s_201[] =
{
    { { REQ_TOKEN}, {  28} },                             
    { {       347}, { 311} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {       343}, {  97} }, // unary_expression         
    { {        40}, {  98} }, // '('                      
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       330}, { 105} }, // primary_expression       
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {         0}, {   0} },                             
};

SR__ s_202[] =
{
    { { REQ_TOKEN}, {  27} },                             
    { {       346}, { 312} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {       343}, {  97} }, // unary_expression         
    { {        40}, {  98} }, // '('                      
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       330}, { 105} }, // primary_expression       
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {         0}, {   0} },                             
};

SR__ s_203[] =
{
    { { REQ_TOKEN}, {  27} },                             
    { {       346}, { 313} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {       343}, {  97} }, // unary_expression         
    { {        40}, {  98} }, // '('                      
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       330}, { 105} }, // primary_expression       
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {         0}, {   0} },                             
};

SR__ s_204[] =
{
    { { REQ_TOKEN}, {  26} },                        
    { {       345}, { 314} }, // cast_expression     
    { {       343}, {  97} }, // unary_expression    
    { {        40}, {  98} }, // '('                 
    { {       340}, {  99} }, // postfix_expression  
    { {       264}, { 100} }, // INC_OP              
    { {       265}, { 101} }, // DEC_OP              
    { {       344}, { 102} }, // unary_operator      
    { {       262}, { 103} }, // SIZEOF              
    { {       324}, { 104} }, // ALIGNOF             
    { {       330}, { 105} }, // primary_expression  
    { {        38}, { 106} }, // '&'                 
    { {        42}, { 107} }, // '*'                 
    { {        43}, { 108} }, // '+'                 
    { {        45}, { 109} }, // '-'                 
    { {       126}, { 110} }, // '~'                 
    { {        33}, { 111} }, // '!'                 
    { {       257}, { 112} }, // IDENTIFIER          
    { {       331}, { 113} }, // constant            
    { {       332}, { 114} }, // string              
    { {       334}, { 115} }, // generic_selection   
    { {       258}, { 116} }, // I_CONSTANT          
    { {       259}, { 117} }, // F_CONSTANT          
    { {       285}, { 118} }, // ENUMERATION_CONSTANT
    { {       260}, { 119} }, // STRING_LITERAL      
    { {       326}, { 120} }, // GENERIC             
    { {         0}, {   0} },                        
};

SR__ s_205[] =
{
    { { REQ_TOKEN}, {  26} },                        
    { {       345}, { 315} }, // cast_expression     
    { {       343}, {  97} }, // unary_expression    
    { {        40}, {  98} }, // '('                 
    { {       340}, {  99} }, // postfix_expression  
    { {       264}, { 100} }, // INC_OP              
    { {       265}, { 101} }, // DEC_OP              
    { {       344}, { 102} }, // unary_operator      
    { {       262}, { 103} }, // SIZEOF              
    { {       324}, { 104} }, // ALIGNOF             
    { {       330}, { 105} }, // primary_expression  
    { {        38}, { 106} }, // '&'                 
    { {        42}, { 107} }, // '*'                 
    { {        43}, { 108} }, // '+'                 
    { {        45}, { 109} }, // '-'                 
    { {       126}, { 110} }, // '~'                 
    { {        33}, { 111} }, // '!'                 
    { {       257}, { 112} }, // IDENTIFIER          
    { {       331}, { 113} }, // constant            
    { {       332}, { 114} }, // string              
    { {       334}, { 115} }, // generic_selection   
    { {       258}, { 116} }, // I_CONSTANT          
    { {       259}, { 117} }, // F_CONSTANT          
    { {       285}, { 118} }, // ENUMERATION_CONSTANT
    { {       260}, { 119} }, // STRING_LITERAL      
    { {       326}, { 120} }, // GENERIC             
    { {         0}, {   0} },                        
};

SR__ s_206[] =
{
    { { REQ_TOKEN}, {  26} },                        
    { {       345}, { 316} }, // cast_expression     
    { {       343}, {  97} }, // unary_expression    
    { {        40}, {  98} }, // '('                 
    { {       340}, {  99} }, // postfix_expression  
    { {       264}, { 100} }, // INC_OP              
    { {       265}, { 101} }, // DEC_OP              
    { {       344}, { 102} }, // unary_operator      
    { {       262}, { 103} }, // SIZEOF              
    { {       324}, { 104} }, // ALIGNOF             
    { {       330}, { 105} }, // primary_expression  
    { {        38}, { 106} }, // '&'                 
    { {        42}, { 107} }, // '*'                 
    { {        43}, { 108} }, // '+'                 
    { {        45}, { 109} }, // '-'                 
    { {       126}, { 110} }, // '~'                 
    { {        33}, { 111} }, // '!'                 
    { {       257}, { 112} }, // IDENTIFIER          
    { {       331}, { 113} }, // constant            
    { {       332}, { 114} }, // string              
    { {       334}, { 115} }, // generic_selection   
    { {       258}, { 116} }, // I_CONSTANT          
    { {       259}, { 117} }, // F_CONSTANT          
    { {       285}, { 118} }, // ENUMERATION_CONSTANT
    { {       260}, { 119} }, // STRING_LITERAL      
    { {       326}, { 120} }, // GENERIC             
    { {         0}, {   0} },                        
};

SR__ s_207[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 317} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_208[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 318} }, // ')'
    { {        44}, { 270} }, // ','
    { {         0}, {   0} },       
};

SR__ s_209[] =
{
    { { REQ_TOKEN}, {  39} },                             
    { {       333}, { 319} }, // expression               
    { {       336}, { 169} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_210[] =
{
    { { REQ_TOKEN}, {  40} },                             
    { {        41}, { 320} }, // ')'                      
    { {       341}, { 321} }, // argument_expression_list 
    { {       336}, { 322} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_211[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       257}, { 323} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_212[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       257}, { 324} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_213[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR__ s_214[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR__ s_215[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -29} }, 
};

SR__ s_216[] =
{
    { { REQ_TOKEN}, {  67} },                             
    { {       339}, { 325} }, // type_name                
    { {       333}, { 208} }, // expression               
    { {       377}, { 122} }, // specifier_qualifier_list 
    { {       336}, { 169} }, // assignment_expression    
    { {       364}, { 123} }, // type_specifier           
    { {       365}, { 124} }, // type_qualifier           
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       304}, {  19} }, // VOID                     
    { {       296}, {  20} }, // CHAR                     
    { {       297}, {  21} }, // SHORT                    
    { {       298}, {  22} }, // INT                      
    { {       299}, {  23} }, // LONG                     
    { {       302}, {  24} }, // FLOAT                    
    { {       303}, {  25} }, // DOUBLE                   
    { {       300}, {  26} }, // SIGNED                   
    { {       301}, {  27} }, // UNSIGNED                 
    { {       295}, {  28} }, // BOOL                     
    { {       305}, {  29} }, // COMPLEX                  
    { {       306}, {  30} }, // IMAGINARY                
    { {       371}, {  31} }, // atomic_type_specifier    
    { {       372}, {  32} }, // struct_or_union_specifier
    { {       373}, {  33} }, // enum_specifier           
    { {       284}, {  34} }, // TYPEDEF_NAME             
    { {       292}, {  35} }, // CONST                    
    { {       293}, {  36} }, // RESTRICT                 
    { {       294}, {  37} }, // VOLATILE                 
    { {       325}, {  38} }, // ATOMIC                   
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       374}, {  42} }, // struct_or_union          
    { {       309}, {  43} }, // ENUM                     
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       307}, {  44} }, // STRUCT                   
    { {       308}, {  45} }, // UNION                    
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_217[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -30} }, 
};

SR__ s_218[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -31} }, 
};

SR__ s_219[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -32} }, 
};

SR__ s_220[] =
{
    { { REQ_TOKEN}, {  67} },                             
    { {       339}, { 326} }, // type_name                
    { {       333}, { 208} }, // expression               
    { {       377}, { 122} }, // specifier_qualifier_list 
    { {       336}, { 169} }, // assignment_expression    
    { {       364}, { 123} }, // type_specifier           
    { {       365}, { 124} }, // type_qualifier           
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       304}, {  19} }, // VOID                     
    { {       296}, {  20} }, // CHAR                     
    { {       297}, {  21} }, // SHORT                    
    { {       298}, {  22} }, // INT                      
    { {       299}, {  23} }, // LONG                     
    { {       302}, {  24} }, // FLOAT                    
    { {       303}, {  25} }, // DOUBLE                   
    { {       300}, {  26} }, // SIGNED                   
    { {       301}, {  27} }, // UNSIGNED                 
    { {       295}, {  28} }, // BOOL                     
    { {       305}, {  29} }, // COMPLEX                  
    { {       306}, {  30} }, // IMAGINARY                
    { {       371}, {  31} }, // atomic_type_specifier    
    { {       372}, {  32} }, // struct_or_union_specifier
    { {       373}, {  33} }, // enum_specifier           
    { {       284}, {  34} }, // TYPEDEF_NAME             
    { {       292}, {  35} }, // CONST                    
    { {       293}, {  36} }, // RESTRICT                 
    { {       294}, {  37} }, // VOLATILE                 
    { {       325}, {  38} }, // ATOMIC                   
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       374}, {  42} }, // struct_or_union          
    { {       309}, {  43} }, // ENUM                     
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       307}, {  44} }, // STRUCT                   
    { {       308}, {  45} }, // UNION                    
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_221[] =
{
    { { REQ_TOKEN}, {  29} },                             
    { {       339}, { 327} }, // type_name                
    { {       377}, { 122} }, // specifier_qualifier_list 
    { {       364}, { 123} }, // type_specifier           
    { {       365}, { 124} }, // type_qualifier           
    { {       304}, {  19} }, // VOID                     
    { {       296}, {  20} }, // CHAR                     
    { {       297}, {  21} }, // SHORT                    
    { {       298}, {  22} }, // INT                      
    { {       299}, {  23} }, // LONG                     
    { {       302}, {  24} }, // FLOAT                    
    { {       303}, {  25} }, // DOUBLE                   
    { {       300}, {  26} }, // SIGNED                   
    { {       301}, {  27} }, // UNSIGNED                 
    { {       295}, {  28} }, // BOOL                     
    { {       305}, {  29} }, // COMPLEX                  
    { {       306}, {  30} }, // IMAGINARY                
    { {       371}, {  31} }, // atomic_type_specifier    
    { {       372}, {  32} }, // struct_or_union_specifier
    { {       373}, {  33} }, // enum_specifier           
    { {       284}, {  34} }, // TYPEDEF_NAME             
    { {       292}, {  35} }, // CONST                    
    { {       293}, {  36} }, // RESTRICT                 
    { {       294}, {  37} }, // VOLATILE                 
    { {       325}, {  38} }, // ATOMIC                   
    { {       374}, {  42} }, // struct_or_union          
    { {       309}, {  43} }, // ENUM                     
    { {       307}, {  44} }, // STRUCT                   
    { {       308}, {  45} }, // UNION                    
    { {         0}, {   0} },                             
};

SR__ s_222[] =
{
    { { REQ_TOKEN}, {  38} },                             
    { {       336}, { 328} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_223[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -156} }, 
};

SR__ s_224[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -196} }, 
};

SR__ s_225[] =
{
    { { REQ_DEF}, {    4} },                              
    { {     390}, {  329} }, // direct_abstract_declarator
    { {      40}, {  227} }, // '('                       
    { {      91}, {  228} }, // '['                       
    { {       0}, { -199} },                              
};

SR__ s_226[] =
{
    { { REQ_DEF}, {    3} },       
    { {      91}, {  330} }, // '['
    { {      40}, {  331} }, // '('
    { {       0}, { -200} },       
};

SR__ s_227[] =
{
    { { REQ_TOKEN}, {  50} },                              
    { {       389}, { 332} }, // abstract_declarator       
    { {        41}, { 333} }, // ')'                       
    { {       385}, { 334} }, // parameter_type_list       
    { {       382}, { 225} }, // pointer                   
    { {       390}, { 226} }, // direct_abstract_declarator
    { {       387}, { 180} }, // parameter_list            
    { {        42}, {  53} }, // '*'                       
    { {        40}, { 227} }, // '('                       
    { {        91}, { 228} }, // '['                       
    { {       388}, { 182} }, // parameter_declaration     
    { {       360}, { 183} }, // declaration_specifiers    
    { {       363}, {   7} }, // storage_class_specifier   
    { {       364}, {   8} }, // type_specifier            
    { {       365}, {   9} }, // type_qualifier            
    { {       366}, {  10} }, // function_specifier        
    { {       367}, {  11} }, // alignment_specifier       
    { {       286}, {  13} }, // TYPEDEF                   
    { {       287}, {  14} }, // EXTERN                    
    { {       288}, {  15} }, // STATIC                    
    { {       329}, {  16} }, // THREAD_LOCAL              
    { {       289}, {  17} }, // AUTO                      
    { {       290}, {  18} }, // REGISTER                  
    { {       304}, {  19} }, // VOID                      
    { {       296}, {  20} }, // CHAR                      
    { {       297}, {  21} }, // SHORT                     
    { {       298}, {  22} }, // INT                       
    { {       299}, {  23} }, // LONG                      
    { {       302}, {  24} }, // FLOAT                     
    { {       303}, {  25} }, // DOUBLE                    
    { {       300}, {  26} }, // SIGNED                    
    { {       301}, {  27} }, // UNSIGNED                  
    { {       295}, {  28} }, // BOOL                      
    { {       305}, {  29} }, // COMPLEX                   
    { {       306}, {  30} }, // IMAGINARY                 
    { {       371}, {  31} }, // atomic_type_specifier     
    { {       372}, {  32} }, // struct_or_union_specifier 
    { {       373}, {  33} }, // enum_specifier            
    { {       284}, {  34} }, // TYPEDEF_NAME              
    { {       292}, {  35} }, // CONST                     
    { {       293}, {  36} }, // RESTRICT                  
    { {       294}, {  37} }, // VOLATILE                  
    { {       325}, {  38} }, // ATOMIC                    
    { {       291}, {  39} }, // INLINE                    
    { {       327}, {  40} }, // NORETURN                  
    { {       323}, {  41} }, // ALIGNAS                   
    { {       374}, {  42} }, // struct_or_union           
    { {       309}, {  43} }, // ENUM                      
    { {       307}, {  44} }, // STRUCT                    
    { {       308}, {  45} }, // UNION                     
    { {         0}, {   0} },                              
};

SR__ s_228[] =
{
    { { REQ_TOKEN}, {  46} },                             
    { {        93}, { 335} }, // ']'                      
    { {        42}, { 336} }, // '*'                      
    { {       288}, { 337} }, // STATIC                   
    { {       384}, { 338} }, // type_qualifier_list      
    { {       336}, { 339} }, // assignment_expression    
    { {       365}, {  81} }, // type_qualifier           
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       292}, {  35} }, // CONST                    
    { {       293}, {  36} }, // RESTRICT                 
    { {       294}, {  37} }, // VOLATILE                 
    { {       325}, {  82} }, // ATOMIC                   
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_229[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -138} }, 
};

SR__ s_230[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -140} }, 
};

SR__ s_231[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -163} }, 
};

SR__ s_232[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -164} }, 
};

SR__ s_233[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -128} }, 
};

SR__ s_234[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -134} }, 
};

SR__ s_235[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -135} }, 
};

SR__ s_236[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        59}, { 340} }, // ';'
    { {        44}, { 341} }, // ','
    { {         0}, {   0} },       
};

SR__ s_237[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -142} }, 
};

SR__ s_238[] =
{
    { { REQ_TOKEN}, {  38} },                             
    { {       358}, { 342} }, // constant_expression      
    { {       356}, {  85} }, // conditional_expression   
    { {       355}, {  86} }, // logical_or_expression    
    { {       354}, {  87} }, // logical_and_expression   
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {       343}, {  97} }, // unary_expression         
    { {        40}, {  98} }, // '('                      
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       330}, { 105} }, // primary_expression       
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {         0}, {   0} },                             
};

SR__ s_239[] =
{
    { { REQ_DEF}, {    2} },       
    { {      58}, {  343} }, // ':'
    { {       0}, { -146} },       
};

SR__ s_240[] =
{
    { { REQ_TOKEN}, {  32} },                             
    { {       125}, { 344} }, // '}'                      
    { {       376}, { 234} }, // struct_declaration       
    { {       377}, { 129} }, // specifier_qualifier_list 
    { {       362}, { 130} }, // static_assert_declaration
    { {       364}, { 123} }, // type_specifier           
    { {       365}, { 124} }, // type_qualifier           
    { {       328}, {  12} }, // STATIC_ASSERT            
    { {       304}, {  19} }, // VOID                     
    { {       296}, {  20} }, // CHAR                     
    { {       297}, {  21} }, // SHORT                    
    { {       298}, {  22} }, // INT                      
    { {       299}, {  23} }, // LONG                     
    { {       302}, {  24} }, // FLOAT                    
    { {       303}, {  25} }, // DOUBLE                   
    { {       300}, {  26} }, // SIGNED                   
    { {       301}, {  27} }, // UNSIGNED                 
    { {       295}, {  28} }, // BOOL                     
    { {       305}, {  29} }, // COMPLEX                  
    { {       306}, {  30} }, // IMAGINARY                
    { {       371}, {  31} }, // atomic_type_specifier    
    { {       372}, {  32} }, // struct_or_union_specifier
    { {       373}, {  33} }, // enum_specifier           
    { {       284}, {  34} }, // TYPEDEF_NAME             
    { {       292}, {  35} }, // CONST                    
    { {       293}, {  36} }, // RESTRICT                 
    { {       294}, {  37} }, // VOLATILE                 
    { {       325}, {  38} }, // ATOMIC                   
    { {       374}, {  42} }, // struct_or_union          
    { {       309}, {  43} }, // ENUM                     
    { {       307}, {  44} }, // STRUCT                   
    { {       308}, {  45} }, // UNION                    
    { {         0}, {   0} },                             
};

SR__ s_241[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -147} }, 
};

SR__ s_242[] =
{
    { { REQ_TOKEN}, {   5} },                        
    { {       125}, { 345} }, // '}'                 
    { {       381}, { 346} }, // enumerator          
    { {       335}, { 134} }, // enumeration_constant
    { {       257}, { 135} }, // IDENTIFIER          
    { {         0}, {   0} },                        
};

SR__ s_243[] =
{
    { { REQ_TOKEN}, {  38} },                             
    { {       358}, { 347} }, // constant_expression      
    { {       356}, {  85} }, // conditional_expression   
    { {       355}, {  86} }, // logical_or_expression    
    { {       354}, {  87} }, // logical_and_expression   
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {       343}, {  97} }, // unary_expression         
    { {        40}, {  98} }, // '('                      
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       330}, { 105} }, // primary_expression       
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {         0}, {   0} },                             
};

SR__ s_244[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {       125}, { 348} }, // '}'
    { {        44}, { 349} }, // ','
    { {         0}, {   0} },       
};

SR__ s_245[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {       125}, { 350} }, // '}'
    { {        44}, { 351} }, // ','
    { {         0}, {   0} },       
};

SR__ s_246[] =
{
    { { REQ_TOKEN}, {  40} },                             
    { {       370}, { 352} }, // initializer              
    { {       123}, { 140} }, // '{'                      
    { {       336}, { 141} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_247[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -226} }, 
};

SR__ s_248[] =
{
    { { REQ_TOKEN}, {   5} },              
    { {        61}, { 353} }, // '='       
    { {       393}, { 354} }, // designator
    { {        91}, { 250} }, // '['       
    { {        46}, { 251} }, // '.'       
    { {         0}, {   0} },              
};

SR__ s_249[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -230} }, 
};

SR__ s_250[] =
{
    { { REQ_TOKEN}, {  38} },                             
    { {       358}, { 355} }, // constant_expression      
    { {       356}, {  85} }, // conditional_expression   
    { {       355}, {  86} }, // logical_or_expression    
    { {       354}, {  87} }, // logical_and_expression   
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {       343}, {  97} }, // unary_expression         
    { {        40}, {  98} }, // '('                      
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       330}, { 105} }, // primary_expression       
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {         0}, {   0} },                             
};

SR__ s_251[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       257}, { 356} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_252[] =
{
    { { REQ_TOKEN}, {  38} },                             
    { {       336}, { 357} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_253[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -75} }, 
};

SR__ s_254[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -76} }, 
};

SR__ s_255[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -77} }, 
};

SR__ s_256[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -78} }, 
};

SR__ s_257[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -79} }, 
};

SR__ s_258[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -80} }, 
};

SR__ s_259[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -81} }, 
};

SR__ s_260[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -82} }, 
};

SR__ s_261[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -83} }, 
};

SR__ s_262[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -84} }, 
};

SR__ s_263[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -85} }, 
};

SR__ s_264[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -245} }, 
};

SR__ s_265[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -247} }, 
};

SR__ s_266[] =
{
    { { REQ_TOKEN}, {  59} },                             
    { {       394}, { 358} }, // statement                
    { {       395}, { 149} }, // labeled_statement        
    { {       396}, { 150} }, // compound_statement       
    { {       397}, { 151} }, // expression_statement     
    { {       398}, { 152} }, // selection_statement      
    { {       399}, { 153} }, // iteration_statement      
    { {       400}, { 154} }, // jump_statement           
    { {       257}, { 155} }, // IDENTIFIER               
    { {       311}, { 156} }, // CASE                     
    { {       312}, { 157} }, // DEFAULT                  
    { {       123}, {  72} }, // '{'                      
    { {        59}, { 158} }, // ';'                      
    { {       333}, { 159} }, // expression               
    { {       313}, { 160} }, // IF                       
    { {       315}, { 161} }, // SWITCH                   
    { {       316}, { 162} }, // WHILE                    
    { {       317}, { 163} }, // DO                       
    { {       318}, { 164} }, // FOR                      
    { {       319}, { 165} }, // GOTO                     
    { {       320}, { 166} }, // CONTINUE                 
    { {       321}, { 167} }, // BREAK                    
    { {       322}, { 168} }, // RETURN                   
    { {       336}, { 169} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_267[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        58}, { 359} }, // ':'
    { {         0}, {   0} },       
};

SR__ s_268[] =
{
    { { REQ_TOKEN}, {  59} },                             
    { {       394}, { 360} }, // statement                
    { {       395}, { 149} }, // labeled_statement        
    { {       396}, { 150} }, // compound_statement       
    { {       397}, { 151} }, // expression_statement     
    { {       398}, { 152} }, // selection_statement      
    { {       399}, { 153} }, // iteration_statement      
    { {       400}, { 154} }, // jump_statement           
    { {       257}, { 155} }, // IDENTIFIER               
    { {       311}, { 156} }, // CASE                     
    { {       312}, { 157} }, // DEFAULT                  
    { {       123}, {  72} }, // '{'                      
    { {        59}, { 158} }, // ';'                      
    { {       333}, { 159} }, // expression               
    { {       313}, { 160} }, // IF                       
    { {       315}, { 161} }, // SWITCH                   
    { {       316}, { 162} }, // WHILE                    
    { {       317}, { 163} }, // DO                       
    { {       318}, { 164} }, // FOR                      
    { {       319}, { 165} }, // GOTO                     
    { {       320}, { 166} }, // CONTINUE                 
    { {       321}, { 167} }, // BREAK                    
    { {       322}, { 168} }, // RETURN                   
    { {       336}, { 169} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_269[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -251} }, 
};

SR__ s_270[] =
{
    { { REQ_TOKEN}, {  38} },                             
    { {       336}, { 361} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_271[] =
{
    { { REQ_TOKEN}, {  39} },                             
    { {       333}, { 362} }, // expression               
    { {       336}, { 169} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_272[] =
{
    { { REQ_TOKEN}, {  39} },                             
    { {       333}, { 363} }, // expression               
    { {       336}, { 169} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_273[] =
{
    { { REQ_TOKEN}, {  39} },                             
    { {       333}, { 364} }, // expression               
    { {       336}, { 169} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_274[] =
{
    { { REQ_TOKEN}, {   2} },         
    { {       316}, { 365} }, // WHILE
    { {         0}, {   0} },         
};

SR__ s_275[] =
{
    { { REQ_TOKEN}, {  83} },                             
    { {       397}, { 366} }, // expression_statement     
    { {       359}, { 367} }, // declaration              
    { {        59}, { 158} }, // ';'                      
    { {       333}, { 159} }, // expression               
    { {       360}, {  73} }, // declaration_specifiers   
    { {       362}, {   6} }, // static_assert_declaration
    { {       336}, { 169} }, // assignment_expression    
    { {       363}, {   7} }, // storage_class_specifier  
    { {       364}, {   8} }, // type_specifier           
    { {       365}, {   9} }, // type_qualifier           
    { {       366}, {  10} }, // function_specifier       
    { {       367}, {  11} }, // alignment_specifier      
    { {       328}, {  12} }, // STATIC_ASSERT            
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       286}, {  13} }, // TYPEDEF                  
    { {       287}, {  14} }, // EXTERN                   
    { {       288}, {  15} }, // STATIC                   
    { {       329}, {  16} }, // THREAD_LOCAL             
    { {       289}, {  17} }, // AUTO                     
    { {       290}, {  18} }, // REGISTER                 
    { {       304}, {  19} }, // VOID                     
    { {       296}, {  20} }, // CHAR                     
    { {       297}, {  21} }, // SHORT                    
    { {       298}, {  22} }, // INT                      
    { {       299}, {  23} }, // LONG                     
    { {       302}, {  24} }, // FLOAT                    
    { {       303}, {  25} }, // DOUBLE                   
    { {       300}, {  26} }, // SIGNED                   
    { {       301}, {  27} }, // UNSIGNED                 
    { {       295}, {  28} }, // BOOL                     
    { {       305}, {  29} }, // COMPLEX                  
    { {       306}, {  30} }, // IMAGINARY                
    { {       371}, {  31} }, // atomic_type_specifier    
    { {       372}, {  32} }, // struct_or_union_specifier
    { {       373}, {  33} }, // enum_specifier           
    { {       284}, {  34} }, // TYPEDEF_NAME             
    { {       292}, {  35} }, // CONST                    
    { {       293}, {  36} }, // RESTRICT                 
    { {       294}, {  37} }, // VOLATILE                 
    { {       325}, {  38} }, // ATOMIC                   
    { {       291}, {  39} }, // INLINE                   
    { {       327}, {  40} }, // NORETURN                 
    { {       323}, {  41} }, // ALIGNAS                  
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       374}, {  42} }, // struct_or_union          
    { {       309}, {  43} }, // ENUM                     
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       307}, {  44} }, // STRUCT                   
    { {       308}, {  45} }, // UNION                    
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_276[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 368} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_277[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -262} }, 
};

SR__ s_278[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -263} }, 
};

SR__ s_279[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -264} }, 
};

SR__ s_280[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        59}, { 369} }, // ';'
    { {        44}, { 270} }, // ','
    { {         0}, {   0} },       
};

SR__ s_281[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -170} }, 
};

SR__ s_282[] =
{
    { { REQ_TOKEN}, {  43} },                             
    { {       336}, { 370} }, // assignment_expression    
    { {       365}, { 185} }, // type_qualifier           
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       292}, {  35} }, // CONST                    
    { {       293}, {  36} }, // RESTRICT                 
    { {       294}, {  37} }, // VOLATILE                 
    { {       325}, {  82} }, // ATOMIC                   
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_283[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        93}, { 371} }, // ']'
    { {         0}, {   0} },       
};

SR__ s_284[] =
{
    { { REQ_DEF}, {   2} },       
    { {      93}, { 372} }, // ']'
    { {       0}, { -36} },       
};

SR__ s_285[] =
{
    { { REQ_TOKEN}, {  38} },                             
    { {       336}, { 373} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_286[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        93}, { 374} }, // ']'
    { {         0}, {   0} },       
};

SR__ s_287[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -176} }, 
};

SR__ s_288[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -177} }, 
};

SR__ s_289[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -178} }, 
};

SR__ s_290[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -180} }, 
};

SR__ s_291[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       257}, { 375} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_292[] =
{
    { { REQ_TOKEN}, {  42} },                             
    { {       310}, { 376} }, // ELLIPSIS                 
    { {       388}, { 377} }, // parameter_declaration    
    { {       360}, { 183} }, // declaration_specifiers   
    { {       363}, {   7} }, // storage_class_specifier  
    { {       364}, {   8} }, // type_specifier           
    { {       365}, {   9} }, // type_qualifier           
    { {       366}, {  10} }, // function_specifier       
    { {       367}, {  11} }, // alignment_specifier      
    { {       286}, {  13} }, // TYPEDEF                  
    { {       287}, {  14} }, // EXTERN                   
    { {       288}, {  15} }, // STATIC                   
    { {       329}, {  16} }, // THREAD_LOCAL             
    { {       289}, {  17} }, // AUTO                     
    { {       290}, {  18} }, // REGISTER                 
    { {       304}, {  19} }, // VOID                     
    { {       296}, {  20} }, // CHAR                     
    { {       297}, {  21} }, // SHORT                    
    { {       298}, {  22} }, // INT                      
    { {       299}, {  23} }, // LONG                     
    { {       302}, {  24} }, // FLOAT                    
    { {       303}, {  25} }, // DOUBLE                   
    { {       300}, {  26} }, // SIGNED                   
    { {       301}, {  27} }, // UNSIGNED                 
    { {       295}, {  28} }, // BOOL                     
    { {       305}, {  29} }, // COMPLEX                  
    { {       306}, {  30} }, // IMAGINARY                
    { {       371}, {  31} }, // atomic_type_specifier    
    { {       372}, {  32} }, // struct_or_union_specifier
    { {       373}, {  33} }, // enum_specifier           
    { {       284}, {  34} }, // TYPEDEF_NAME             
    { {       292}, {  35} }, // CONST                    
    { {       293}, {  36} }, // RESTRICT                 
    { {       294}, {  37} }, // VOLATILE                 
    { {       325}, {  38} }, // ATOMIC                   
    { {       291}, {  39} }, // INLINE                   
    { {       327}, {  40} }, // NORETURN                 
    { {       323}, {  41} }, // ALIGNAS                  
    { {       374}, {  42} }, // struct_or_union          
    { {       309}, {  43} }, // ENUM                     
    { {       307}, {  44} }, // STRUCT                   
    { {       308}, {  45} }, // UNION                    
    { {         0}, {   0} },                             
};

SR__ s_293[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -191} }, 
};

SR__ s_294[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -192} }, 
};

SR__ s_295[] =
{
    { { REQ_DEF}, {    6} },                              
    { {     383}, {   76} }, // direct_declarator         
    { {     390}, {  329} }, // direct_abstract_declarator
    { {     257}, {   54} }, // IDENTIFIER                
    { {      40}, {  296} }, // '('                       
    { {      91}, {  228} }, // '['                       
    { {       0}, { -199} },                              
};

SR__ s_296[] =
{
    { { REQ_TOKEN}, {  53} },                              
    { {       369}, {  83} }, // declarator                
    { {       389}, { 332} }, // abstract_declarator       
    { {        41}, { 333} }, // ')'                       
    { {       385}, { 334} }, // parameter_type_list       
    { {       382}, { 295} }, // pointer                   
    { {       383}, {  51} }, // direct_declarator         
    { {       390}, { 226} }, // direct_abstract_declarator
    { {       387}, { 180} }, // parameter_list            
    { {        42}, {  53} }, // '*'                       
    { {       257}, {  54} }, // IDENTIFIER                
    { {        40}, { 296} }, // '('                       
    { {        91}, { 228} }, // '['                       
    { {       388}, { 182} }, // parameter_declaration     
    { {       360}, { 183} }, // declaration_specifiers    
    { {       363}, {   7} }, // storage_class_specifier   
    { {       364}, {   8} }, // type_specifier            
    { {       365}, {   9} }, // type_qualifier            
    { {       366}, {  10} }, // function_specifier        
    { {       367}, {  11} }, // alignment_specifier       
    { {       286}, {  13} }, // TYPEDEF                   
    { {       287}, {  14} }, // EXTERN                    
    { {       288}, {  15} }, // STATIC                    
    { {       329}, {  16} }, // THREAD_LOCAL              
    { {       289}, {  17} }, // AUTO                      
    { {       290}, {  18} }, // REGISTER                  
    { {       304}, {  19} }, // VOID                      
    { {       296}, {  20} }, // CHAR                      
    { {       297}, {  21} }, // SHORT                     
    { {       298}, {  22} }, // INT                       
    { {       299}, {  23} }, // LONG                      
    { {       302}, {  24} }, // FLOAT                     
    { {       303}, {  25} }, // DOUBLE                    
    { {       300}, {  26} }, // SIGNED                    
    { {       301}, {  27} }, // UNSIGNED                  
    { {       295}, {  28} }, // BOOL                      
    { {       305}, {  29} }, // COMPLEX                   
    { {       306}, {  30} }, // IMAGINARY                 
    { {       371}, {  31} }, // atomic_type_specifier     
    { {       372}, {  32} }, // struct_or_union_specifier 
    { {       373}, {  33} }, // enum_specifier            
    { {       284}, {  34} }, // TYPEDEF_NAME              
    { {       292}, {  35} }, // CONST                     
    { {       293}, {  36} }, // RESTRICT                  
    { {       294}, {  37} }, // VOLATILE                  
    { {       325}, {  38} }, // ATOMIC                    
    { {       291}, {  39} }, // INLINE                    
    { {       327}, {  40} }, // NORETURN                  
    { {       323}, {  41} }, // ALIGNAS                   
    { {       374}, {  42} }, // struct_or_union           
    { {       309}, {  43} }, // ENUM                      
    { {       307}, {  44} }, // STRUCT                    
    { {       308}, {  45} }, // UNION                     
    { {         0}, {   0} },                              
};

SR__ s_297[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 378} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_298[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        58}, { 379} }, // ':'
    { {        44}, { 270} }, // ','
    { {         0}, {   0} },       
};

SR__ s_299[] =
{
    { { REQ_DEF}, {   2} },          
    { {     272}, { 190} }, // AND_OP
    { {       0}, { -70} },          
};

SR__ s_300[] =
{
    { { REQ_DEF}, {   2} },       
    { {     124}, { 191} }, // '|'
    { {       0}, { -68} },       
};

SR__ s_301[] =
{
    { { REQ_DEF}, {   2} },       
    { {      94}, { 192} }, // '^'
    { {       0}, { -66} },       
};

SR__ s_302[] =
{
    { { REQ_DEF}, {   2} },       
    { {      38}, { 193} }, // '&'
    { {       0}, { -64} },       
};

SR__ s_303[] =
{
    { { REQ_DEF}, {   3} },         
    { {     270}, { 194} }, // EQ_OP
    { {     271}, { 195} }, // NE_OP
    { {       0}, { -62} },         
};

SR__ s_304[] =
{
    { { REQ_DEF}, {   5} },         
    { {      60}, { 196} }, // '<'  
    { {      62}, { 197} }, // '>'  
    { {     268}, { 198} }, // LE_OP
    { {     269}, { 199} }, // GE_OP
    { {       0}, { -59} },         
};

SR__ s_305[] =
{
    { { REQ_DEF}, {   5} },         
    { {      60}, { 196} }, // '<'  
    { {      62}, { 197} }, // '>'  
    { {     268}, { 198} }, // LE_OP
    { {     269}, { 199} }, // GE_OP
    { {       0}, { -60} },         
};

SR__ s_306[] =
{
    { { REQ_DEF}, {   3} },            
    { {     266}, { 200} }, // LEFT_OP 
    { {     267}, { 201} }, // RIGHT_OP
    { {       0}, { -54} },            
};

SR__ s_307[] =
{
    { { REQ_DEF}, {   3} },            
    { {     266}, { 200} }, // LEFT_OP 
    { {     267}, { 201} }, // RIGHT_OP
    { {       0}, { -55} },            
};

SR__ s_308[] =
{
    { { REQ_DEF}, {   3} },            
    { {     266}, { 200} }, // LEFT_OP 
    { {     267}, { 201} }, // RIGHT_OP
    { {       0}, { -56} },            
};

SR__ s_309[] =
{
    { { REQ_DEF}, {   3} },            
    { {     266}, { 200} }, // LEFT_OP 
    { {     267}, { 201} }, // RIGHT_OP
    { {       0}, { -57} },            
};

SR__ s_310[] =
{
    { { REQ_DEF}, {   3} },       
    { {      43}, { 202} }, // '+'
    { {      45}, { 203} }, // '-'
    { {       0}, { -51} },       
};

SR__ s_311[] =
{
    { { REQ_DEF}, {   3} },       
    { {      43}, { 202} }, // '+'
    { {      45}, { 203} }, // '-'
    { {       0}, { -52} },       
};

SR__ s_312[] =
{
    { { REQ_DEF}, {   4} },       
    { {      42}, { 204} }, // '*'
    { {      47}, { 205} }, // '/'
    { {      37}, { 206} }, // '%'
    { {       0}, { -48} },       
};

SR__ s_313[] =
{
    { { REQ_DEF}, {   4} },       
    { {      42}, { 204} }, // '*'
    { {      47}, { 205} }, // '/'
    { {      37}, { 206} }, // '%'
    { {       0}, { -49} },       
};

SR__ s_314[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -44} }, 
};

SR__ s_315[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -45} }, 
};

SR__ s_316[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -46} }, 
};

SR__ s_317[] =
{
    { { REQ_TOKEN}, {  27} },                        
    { {       345}, { 380} }, // cast_expression     
    { {       123}, { 381} }, // '{'                 
    { {       343}, {  97} }, // unary_expression    
    { {        40}, {  98} }, // '('                 
    { {       340}, {  99} }, // postfix_expression  
    { {       264}, { 100} }, // INC_OP              
    { {       265}, { 101} }, // DEC_OP              
    { {       344}, { 102} }, // unary_operator      
    { {       262}, { 103} }, // SIZEOF              
    { {       324}, { 104} }, // ALIGNOF             
    { {       330}, { 105} }, // primary_expression  
    { {        38}, { 106} }, // '&'                 
    { {        42}, { 107} }, // '*'                 
    { {        43}, { 108} }, // '+'                 
    { {        45}, { 109} }, // '-'                 
    { {       126}, { 110} }, // '~'                 
    { {        33}, { 111} }, // '!'                 
    { {       257}, { 112} }, // IDENTIFIER          
    { {       331}, { 113} }, // constant            
    { {       332}, { 114} }, // string              
    { {       334}, { 115} }, // generic_selection   
    { {       258}, { 116} }, // I_CONSTANT          
    { {       259}, { 117} }, // F_CONSTANT          
    { {       285}, { 118} }, // ENUMERATION_CONSTANT
    { {       260}, { 119} }, // STRING_LITERAL      
    { {       326}, { 120} }, // GENERIC             
    { {         0}, {   0} },                        
};

SR__ s_318[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR__ s_319[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        93}, { 382} }, // ']'
    { {        44}, { 270} }, // ','
    { {         0}, {   0} },       
};

SR__ s_320[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR__ s_321[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 383} }, // ')'
    { {        44}, { 384} }, // ','
    { {         0}, {   0} },       
};

SR__ s_322[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR__ s_323[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -20} }, 
};

SR__ s_324[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -21} }, 
};

SR__ s_325[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 385} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_326[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 386} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_327[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 387} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_328[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        44}, { 388} }, // ','
    { {         0}, {   0} },       
};

SR__ s_329[] =
{
    { { REQ_DEF}, {    3} },       
    { {      91}, {  330} }, // '['
    { {      40}, {  331} }, // '('
    { {       0}, { -198} },       
};

SR__ s_330[] =
{
    { { REQ_TOKEN}, {  46} },                             
    { {        93}, { 389} }, // ']'                      
    { {        42}, { 390} }, // '*'                      
    { {       288}, { 391} }, // STATIC                   
    { {       384}, { 392} }, // type_qualifier_list      
    { {       336}, { 393} }, // assignment_expression    
    { {       365}, {  81} }, // type_qualifier           
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       292}, {  35} }, // CONST                    
    { {       293}, {  36} }, // RESTRICT                 
    { {       294}, {  37} }, // VOLATILE                 
    { {       325}, {  82} }, // ATOMIC                   
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_331[] =
{
    { { REQ_TOKEN}, {  44} },                             
    { {        41}, { 394} }, // ')'                      
    { {       385}, { 395} }, // parameter_type_list      
    { {       387}, { 180} }, // parameter_list           
    { {       388}, { 182} }, // parameter_declaration    
    { {       360}, { 183} }, // declaration_specifiers   
    { {       363}, {   7} }, // storage_class_specifier  
    { {       364}, {   8} }, // type_specifier           
    { {       365}, {   9} }, // type_qualifier           
    { {       366}, {  10} }, // function_specifier       
    { {       367}, {  11} }, // alignment_specifier      
    { {       286}, {  13} }, // TYPEDEF                  
    { {       287}, {  14} }, // EXTERN                   
    { {       288}, {  15} }, // STATIC                   
    { {       329}, {  16} }, // THREAD_LOCAL             
    { {       289}, {  17} }, // AUTO                     
    { {       290}, {  18} }, // REGISTER                 
    { {       304}, {  19} }, // VOID                     
    { {       296}, {  20} }, // CHAR                     
    { {       297}, {  21} }, // SHORT                    
    { {       298}, {  22} }, // INT                      
    { {       299}, {  23} }, // LONG                     
    { {       302}, {  24} }, // FLOAT                    
    { {       303}, {  25} }, // DOUBLE                   
    { {       300}, {  26} }, // SIGNED                   
    { {       301}, {  27} }, // UNSIGNED                 
    { {       295}, {  28} }, // BOOL                     
    { {       305}, {  29} }, // COMPLEX                  
    { {       306}, {  30} }, // IMAGINARY                
    { {       371}, {  31} }, // atomic_type_specifier    
    { {       372}, {  32} }, // struct_or_union_specifier
    { {       373}, {  33} }, // enum_specifier           
    { {       284}, {  34} }, // TYPEDEF_NAME             
    { {       292}, {  35} }, // CONST                    
    { {       293}, {  36} }, // RESTRICT                 
    { {       294}, {  37} }, // VOLATILE                 
    { {       325}, {  38} }, // ATOMIC                   
    { {       291}, {  39} }, // INLINE                   
    { {       327}, {  40} }, // NORETURN                 
    { {       323}, {  41} }, // ALIGNAS                  
    { {       374}, {  42} }, // struct_or_union          
    { {       309}, {  43} }, // ENUM                     
    { {       307}, {  44} }, // STRUCT                   
    { {       308}, {  45} }, // UNION                    
    { {         0}, {   0} },                             
};

SR__ s_332[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 396} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_333[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -218} }, 
};

SR__ s_334[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 397} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_335[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -202} }, 
};

SR__ s_336[] =
{
    { { REQ_DEF}, {   2} },       
    { {      93}, { 398} }, // ']'
    { {       0}, { -36} },       
};

SR__ s_337[] =
{
    { { REQ_TOKEN}, {  44} },                             
    { {       384}, { 399} }, // type_qualifier_list      
    { {       336}, { 400} }, // assignment_expression    
    { {       365}, {  81} }, // type_qualifier           
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       292}, {  35} }, // CONST                    
    { {       293}, {  36} }, // RESTRICT                 
    { {       294}, {  37} }, // VOLATILE                 
    { {       325}, {  82} }, // ATOMIC                   
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_338[] =
{
    { { REQ_TOKEN}, {  45} },                             
    { {       288}, { 401} }, // STATIC                   
    { {       336}, { 402} }, // assignment_expression    
    { {        93}, { 403} }, // ']'                      
    { {       365}, { 185} }, // type_qualifier           
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       292}, {  35} }, // CONST                    
    { {       293}, {  36} }, // RESTRICT                 
    { {       294}, {  37} }, // VOLATILE                 
    { {       325}, {  82} }, // ATOMIC                   
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_339[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        93}, { 404} }, // ']'
    { {         0}, {   0} },       
};

SR__ s_340[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -136} }, 
};

SR__ s_341[] =
{
    { { REQ_TOKEN}, {   9} },                     
    { {       379}, { 405} }, // struct_declarator
    { {        58}, { 238} }, // ':'              
    { {       369}, { 239} }, // declarator       
    { {       382}, {  50} }, // pointer          
    { {       383}, {  51} }, // direct_declarator
    { {        42}, {  53} }, // '*'              
    { {       257}, {  54} }, // IDENTIFIER       
    { {        40}, {  55} }, // '('              
    { {         0}, {   0} },                     
};

SR__ s_342[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -144} }, 
};

SR__ s_343[] =
{
    { { REQ_TOKEN}, {  38} },                             
    { {       358}, { 406} }, // constant_expression      
    { {       356}, {  85} }, // conditional_expression   
    { {       355}, {  86} }, // logical_or_expression    
    { {       354}, {  87} }, // logical_and_expression   
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {       343}, {  97} }, // unary_expression         
    { {        40}, {  98} }, // '('                      
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       330}, { 105} }, // primary_expression       
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {         0}, {   0} },                             
};

SR__ s_344[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -129} }, 
};

SR__ s_345[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -148} }, 
};

SR__ s_346[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -153} }, 
};

SR__ s_347[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -154} }, 
};

SR__ s_348[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -149} }, 
};

SR__ s_349[] =
{
    { { REQ_TOKEN}, {   5} },                        
    { {       125}, { 407} }, // '}'                 
    { {       381}, { 346} }, // enumerator          
    { {       335}, { 134} }, // enumeration_constant
    { {       257}, { 135} }, // IDENTIFIER          
    { {         0}, {   0} },                        
};

SR__ s_350[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -222} }, 
};

SR__ s_351[] =
{
    { { REQ_TOKEN}, {  46} },                             
    { {       125}, { 408} }, // '}'                      
    { {       391}, { 409} }, // designation              
    { {       370}, { 410} }, // initializer              
    { {       392}, { 248} }, // designator_list          
    { {       123}, { 140} }, // '{'                      
    { {       336}, { 141} }, // assignment_expression    
    { {       393}, { 249} }, // designator               
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {        91}, { 250} }, // '['                      
    { {        46}, { 251} }, // '.'                      
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_352[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -225} }, 
};

SR__ s_353[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -229} }, 
};

SR__ s_354[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -231} }, 
};

SR__ s_355[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        93}, { 411} }, // ']'
    { {         0}, {   0} },       
};

SR__ s_356[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -233} }, 
};

SR__ s_357[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -74} }, 
};

SR__ s_358[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -241} }, 
};

SR__ s_359[] =
{
    { { REQ_TOKEN}, {  59} },                             
    { {       394}, { 412} }, // statement                
    { {       395}, { 149} }, // labeled_statement        
    { {       396}, { 150} }, // compound_statement       
    { {       397}, { 151} }, // expression_statement     
    { {       398}, { 152} }, // selection_statement      
    { {       399}, { 153} }, // iteration_statement      
    { {       400}, { 154} }, // jump_statement           
    { {       257}, { 155} }, // IDENTIFIER               
    { {       311}, { 156} }, // CASE                     
    { {       312}, { 157} }, // DEFAULT                  
    { {       123}, {  72} }, // '{'                      
    { {        59}, { 158} }, // ';'                      
    { {       333}, { 159} }, // expression               
    { {       313}, { 160} }, // IF                       
    { {       315}, { 161} }, // SWITCH                   
    { {       316}, { 162} }, // WHILE                    
    { {       317}, { 163} }, // DO                       
    { {       318}, { 164} }, // FOR                      
    { {       319}, { 165} }, // GOTO                     
    { {       320}, { 166} }, // CONTINUE                 
    { {       321}, { 167} }, // BREAK                    
    { {       322}, { 168} }, // RETURN                   
    { {       336}, { 169} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_360[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -243} }, 
};

SR__ s_361[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -87} }, 
};

SR__ s_362[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 413} }, // ')'
    { {        44}, { 270} }, // ','
    { {         0}, {   0} },       
};

SR__ s_363[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 414} }, // ')'
    { {        44}, { 270} }, // ','
    { {         0}, {   0} },       
};

SR__ s_364[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 415} }, // ')'
    { {        44}, { 270} }, // ','
    { {         0}, {   0} },       
};

SR__ s_365[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 416} }, // '('
    { {         0}, {   0} },       
};

SR__ s_366[] =
{
    { { REQ_TOKEN}, {  41} },                             
    { {       397}, { 417} }, // expression_statement     
    { {        59}, { 158} }, // ';'                      
    { {       333}, { 159} }, // expression               
    { {       336}, { 169} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_367[] =
{
    { { REQ_TOKEN}, {  41} },                             
    { {       397}, { 418} }, // expression_statement     
    { {        59}, { 158} }, // ';'                      
    { {       333}, { 159} }, // expression               
    { {       336}, { 169} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_368[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -261} }, 
};

SR__ s_369[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -265} }, 
};

SR__ s_370[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        93}, { 419} }, // ']'
    { {         0}, {   0} },       
};

SR__ s_371[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -172} }, 
};

SR__ s_372[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -173} }, 
};

SR__ s_373[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        93}, { 420} }, // ']'
    { {         0}, {   0} },       
};

SR__ s_374[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -175} }, 
};

SR__ s_375[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -195} }, 
};

SR__ s_376[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -187} }, 
};

SR__ s_377[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -190} }, 
};

SR__ s_378[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 421} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_379[] =
{
    { { REQ_TOKEN}, {  37} },                             
    { {       356}, { 422} }, // conditional_expression   
    { {       355}, {  86} }, // logical_or_expression    
    { {       354}, {  87} }, // logical_and_expression   
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {       343}, {  97} }, // unary_expression         
    { {        40}, {  98} }, // '('                      
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       330}, { 105} }, // primary_expression       
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {         0}, {   0} },                             
};

SR__ s_380[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -42} }, 
};

SR__ s_381[] =
{
    { { REQ_TOKEN}, {  46} },                             
    { {       342}, { 423} }, // initializer_list         
    { {       391}, { 246} }, // designation              
    { {       370}, { 247} }, // initializer              
    { {       392}, { 248} }, // designator_list          
    { {       123}, { 140} }, // '{'                      
    { {       336}, { 141} }, // assignment_expression    
    { {       393}, { 249} }, // designator               
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {        91}, { 250} }, // '['                      
    { {        46}, { 251} }, // '.'                      
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_382[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR__ s_383[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR__ s_384[] =
{
    { { REQ_TOKEN}, {  38} },                             
    { {       336}, { 424} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_385[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {       123}, { 381} }, // '{'
    { {         0}, {   0} },       
};

SR__ s_386[] =
{
    { { REQ_DEF}, {   2} },       
    { {     123}, { 381} }, // '{'
    { {       0}, { -33} },       
};

SR__ s_387[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -34} }, 
};

SR__ s_388[] =
{
    { { REQ_TOKEN}, {  32} },                             
    { {       337}, { 425} }, // generic_assoc_list       
    { {       338}, { 426} }, // generic_association      
    { {       339}, { 427} }, // type_name                
    { {       312}, { 428} }, // DEFAULT                  
    { {       377}, { 122} }, // specifier_qualifier_list 
    { {       364}, { 123} }, // type_specifier           
    { {       365}, { 124} }, // type_qualifier           
    { {       304}, {  19} }, // VOID                     
    { {       296}, {  20} }, // CHAR                     
    { {       297}, {  21} }, // SHORT                    
    { {       298}, {  22} }, // INT                      
    { {       299}, {  23} }, // LONG                     
    { {       302}, {  24} }, // FLOAT                    
    { {       303}, {  25} }, // DOUBLE                   
    { {       300}, {  26} }, // SIGNED                   
    { {       301}, {  27} }, // UNSIGNED                 
    { {       295}, {  28} }, // BOOL                     
    { {       305}, {  29} }, // COMPLEX                  
    { {       306}, {  30} }, // IMAGINARY                
    { {       371}, {  31} }, // atomic_type_specifier    
    { {       372}, {  32} }, // struct_or_union_specifier
    { {       373}, {  33} }, // enum_specifier           
    { {       284}, {  34} }, // TYPEDEF_NAME             
    { {       292}, {  35} }, // CONST                    
    { {       293}, {  36} }, // RESTRICT                 
    { {       294}, {  37} }, // VOLATILE                 
    { {       325}, {  38} }, // ATOMIC                   
    { {       374}, {  42} }, // struct_or_union          
    { {       309}, {  43} }, // ENUM                     
    { {       307}, {  44} }, // STRUCT                   
    { {       308}, {  45} }, // UNION                    
    { {         0}, {   0} },                             
};

SR__ s_389[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -210} }, 
};

SR__ s_390[] =
{
    { { REQ_DEF}, {   2} },       
    { {      93}, { 429} }, // ']'
    { {       0}, { -36} },       
};

SR__ s_391[] =
{
    { { REQ_TOKEN}, {  44} },                             
    { {       384}, { 430} }, // type_qualifier_list      
    { {       336}, { 431} }, // assignment_expression    
    { {       365}, {  81} }, // type_qualifier           
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       292}, {  35} }, // CONST                    
    { {       293}, {  36} }, // RESTRICT                 
    { {       294}, {  37} }, // VOLATILE                 
    { {       325}, {  82} }, // ATOMIC                   
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_392[] =
{
    { { REQ_TOKEN}, {  45} },                             
    { {       336}, { 432} }, // assignment_expression    
    { {       288}, { 433} }, // STATIC                   
    { {        93}, { 434} }, // ']'                      
    { {       365}, { 185} }, // type_qualifier           
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       292}, {  35} }, // CONST                    
    { {       293}, {  36} }, // RESTRICT                 
    { {       294}, {  37} }, // VOLATILE                 
    { {       325}, {  82} }, // ATOMIC                   
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_393[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        93}, { 435} }, // ']'
    { {         0}, {   0} },       
};

SR__ s_394[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -220} }, 
};

SR__ s_395[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 436} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_396[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -201} }, 
};

SR__ s_397[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -219} }, 
};

SR__ s_398[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -203} }, 
};

SR__ s_399[] =
{
    { { REQ_TOKEN}, {  43} },                             
    { {       336}, { 437} }, // assignment_expression    
    { {       365}, { 185} }, // type_qualifier           
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       292}, {  35} }, // CONST                    
    { {       293}, {  36} }, // RESTRICT                 
    { {       294}, {  37} }, // VOLATILE                 
    { {       325}, {  82} }, // ATOMIC                   
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_400[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        93}, { 438} }, // ']'
    { {         0}, {   0} },       
};

SR__ s_401[] =
{
    { { REQ_TOKEN}, {  38} },                             
    { {       336}, { 439} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_402[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        93}, { 440} }, // ']'
    { {         0}, {   0} },       
};

SR__ s_403[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -208} }, 
};

SR__ s_404[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -209} }, 
};

SR__ s_405[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -143} }, 
};

SR__ s_406[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -145} }, 
};

SR__ s_407[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -150} }, 
};

SR__ s_408[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -223} }, 
};

SR__ s_409[] =
{
    { { REQ_TOKEN}, {  40} },                             
    { {       370}, { 441} }, // initializer              
    { {       123}, { 140} }, // '{'                      
    { {       336}, { 141} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_410[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -228} }, 
};

SR__ s_411[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -232} }, 
};

SR__ s_412[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -242} }, 
};

SR__ s_413[] =
{
    { { REQ_TOKEN}, {  59} },                             
    { {       394}, { 442} }, // statement                
    { {       395}, { 149} }, // labeled_statement        
    { {       396}, { 150} }, // compound_statement       
    { {       397}, { 151} }, // expression_statement     
    { {       398}, { 152} }, // selection_statement      
    { {       399}, { 153} }, // iteration_statement      
    { {       400}, { 154} }, // jump_statement           
    { {       257}, { 155} }, // IDENTIFIER               
    { {       311}, { 156} }, // CASE                     
    { {       312}, { 157} }, // DEFAULT                  
    { {       123}, {  72} }, // '{'                      
    { {        59}, { 158} }, // ';'                      
    { {       333}, { 159} }, // expression               
    { {       313}, { 160} }, // IF                       
    { {       315}, { 161} }, // SWITCH                   
    { {       316}, { 162} }, // WHILE                    
    { {       317}, { 163} }, // DO                       
    { {       318}, { 164} }, // FOR                      
    { {       319}, { 165} }, // GOTO                     
    { {       320}, { 166} }, // CONTINUE                 
    { {       321}, { 167} }, // BREAK                    
    { {       322}, { 168} }, // RETURN                   
    { {       336}, { 169} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_414[] =
{
    { { REQ_TOKEN}, {  59} },                             
    { {       394}, { 443} }, // statement                
    { {       395}, { 149} }, // labeled_statement        
    { {       396}, { 150} }, // compound_statement       
    { {       397}, { 151} }, // expression_statement     
    { {       398}, { 152} }, // selection_statement      
    { {       399}, { 153} }, // iteration_statement      
    { {       400}, { 154} }, // jump_statement           
    { {       257}, { 155} }, // IDENTIFIER               
    { {       311}, { 156} }, // CASE                     
    { {       312}, { 157} }, // DEFAULT                  
    { {       123}, {  72} }, // '{'                      
    { {        59}, { 158} }, // ';'                      
    { {       333}, { 159} }, // expression               
    { {       313}, { 160} }, // IF                       
    { {       315}, { 161} }, // SWITCH                   
    { {       316}, { 162} }, // WHILE                    
    { {       317}, { 163} }, // DO                       
    { {       318}, { 164} }, // FOR                      
    { {       319}, { 165} }, // GOTO                     
    { {       320}, { 166} }, // CONTINUE                 
    { {       321}, { 167} }, // BREAK                    
    { {       322}, { 168} }, // RETURN                   
    { {       336}, { 169} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_415[] =
{
    { { REQ_TOKEN}, {  59} },                             
    { {       394}, { 444} }, // statement                
    { {       395}, { 149} }, // labeled_statement        
    { {       396}, { 150} }, // compound_statement       
    { {       397}, { 151} }, // expression_statement     
    { {       398}, { 152} }, // selection_statement      
    { {       399}, { 153} }, // iteration_statement      
    { {       400}, { 154} }, // jump_statement           
    { {       257}, { 155} }, // IDENTIFIER               
    { {       311}, { 156} }, // CASE                     
    { {       312}, { 157} }, // DEFAULT                  
    { {       123}, {  72} }, // '{'                      
    { {        59}, { 158} }, // ';'                      
    { {       333}, { 159} }, // expression               
    { {       313}, { 160} }, // IF                       
    { {       315}, { 161} }, // SWITCH                   
    { {       316}, { 162} }, // WHILE                    
    { {       317}, { 163} }, // DO                       
    { {       318}, { 164} }, // FOR                      
    { {       319}, { 165} }, // GOTO                     
    { {       320}, { 166} }, // CONTINUE                 
    { {       321}, { 167} }, // BREAK                    
    { {       322}, { 168} }, // RETURN                   
    { {       336}, { 169} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_416[] =
{
    { { REQ_TOKEN}, {  39} },                             
    { {       333}, { 445} }, // expression               
    { {       336}, { 169} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_417[] =
{
    { { REQ_TOKEN}, {  40} },                             
    { {        41}, { 446} }, // ')'                      
    { {       333}, { 447} }, // expression               
    { {       336}, { 169} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_418[] =
{
    { { REQ_TOKEN}, {  40} },                             
    { {        41}, { 448} }, // ')'                      
    { {       333}, { 449} }, // expression               
    { {       336}, { 169} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_419[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -171} }, 
};

SR__ s_420[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -174} }, 
};

SR__ s_421[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -234} }, 
};

SR__ s_422[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -72} }, 
};

SR__ s_423[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {       125}, { 450} }, // '}'
    { {        44}, { 451} }, // ','
    { {         0}, {   0} },       
};

SR__ s_424[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR__ s_425[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 452} }, // ')'
    { {        44}, { 453} }, // ','
    { {         0}, {   0} },       
};

SR__ s_426[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR__ s_427[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        58}, { 454} }, // ':'
    { {         0}, {   0} },       
};

SR__ s_428[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        58}, { 455} }, // ':'
    { {         0}, {   0} },       
};

SR__ s_429[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -211} }, 
};

SR__ s_430[] =
{
    { { REQ_TOKEN}, {  43} },                             
    { {       336}, { 456} }, // assignment_expression    
    { {       365}, { 185} }, // type_qualifier           
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       292}, {  35} }, // CONST                    
    { {       293}, {  36} }, // RESTRICT                 
    { {       294}, {  37} }, // VOLATILE                 
    { {       325}, {  82} }, // ATOMIC                   
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_431[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        93}, { 457} }, // ']'
    { {         0}, {   0} },       
};

SR__ s_432[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        93}, { 458} }, // ']'
    { {         0}, {   0} },       
};

SR__ s_433[] =
{
    { { REQ_TOKEN}, {  38} },                             
    { {       336}, { 459} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_434[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -216} }, 
};

SR__ s_435[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -217} }, 
};

SR__ s_436[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -221} }, 
};

SR__ s_437[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        93}, { 460} }, // ']'
    { {         0}, {   0} },       
};

SR__ s_438[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -205} }, 
};

SR__ s_439[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        93}, { 461} }, // ']'
    { {         0}, {   0} },       
};

SR__ s_440[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -207} }, 
};

SR__ s_441[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -227} }, 
};

SR__ s_442[] =
{
    { { REQ_DEF}, {    2} },        
    { {     314}, {  462} }, // ELSE
    { {       0}, { -253} },        
};

SR__ s_443[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -254} }, 
};

SR__ s_444[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -255} }, 
};

SR__ s_445[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 463} }, // ')'
    { {        44}, { 270} }, // ','
    { {         0}, {   0} },       
};

SR__ s_446[] =
{
    { { REQ_TOKEN}, {  59} },                             
    { {       394}, { 464} }, // statement                
    { {       395}, { 149} }, // labeled_statement        
    { {       396}, { 150} }, // compound_statement       
    { {       397}, { 151} }, // expression_statement     
    { {       398}, { 152} }, // selection_statement      
    { {       399}, { 153} }, // iteration_statement      
    { {       400}, { 154} }, // jump_statement           
    { {       257}, { 155} }, // IDENTIFIER               
    { {       311}, { 156} }, // CASE                     
    { {       312}, { 157} }, // DEFAULT                  
    { {       123}, {  72} }, // '{'                      
    { {        59}, { 158} }, // ';'                      
    { {       333}, { 159} }, // expression               
    { {       313}, { 160} }, // IF                       
    { {       315}, { 161} }, // SWITCH                   
    { {       316}, { 162} }, // WHILE                    
    { {       317}, { 163} }, // DO                       
    { {       318}, { 164} }, // FOR                      
    { {       319}, { 165} }, // GOTO                     
    { {       320}, { 166} }, // CONTINUE                 
    { {       321}, { 167} }, // BREAK                    
    { {       322}, { 168} }, // RETURN                   
    { {       336}, { 169} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_447[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 465} }, // ')'
    { {        44}, { 270} }, // ','
    { {         0}, {   0} },       
};

SR__ s_448[] =
{
    { { REQ_TOKEN}, {  59} },                             
    { {       394}, { 466} }, // statement                
    { {       395}, { 149} }, // labeled_statement        
    { {       396}, { 150} }, // compound_statement       
    { {       397}, { 151} }, // expression_statement     
    { {       398}, { 152} }, // selection_statement      
    { {       399}, { 153} }, // iteration_statement      
    { {       400}, { 154} }, // jump_statement           
    { {       257}, { 155} }, // IDENTIFIER               
    { {       311}, { 156} }, // CASE                     
    { {       312}, { 157} }, // DEFAULT                  
    { {       123}, {  72} }, // '{'                      
    { {        59}, { 158} }, // ';'                      
    { {       333}, { 159} }, // expression               
    { {       313}, { 160} }, // IF                       
    { {       315}, { 161} }, // SWITCH                   
    { {       316}, { 162} }, // WHILE                    
    { {       317}, { 163} }, // DO                       
    { {       318}, { 164} }, // FOR                      
    { {       319}, { 165} }, // GOTO                     
    { {       320}, { 166} }, // CONTINUE                 
    { {       321}, { 167} }, // BREAK                    
    { {       322}, { 168} }, // RETURN                   
    { {       336}, { 169} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_449[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 467} }, // ')'
    { {        44}, { 270} }, // ','
    { {         0}, {   0} },       
};

SR__ s_450[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR__ s_451[] =
{
    { { REQ_TOKEN}, {  46} },                             
    { {       125}, { 468} }, // '}'                      
    { {       391}, { 409} }, // designation              
    { {       370}, { 410} }, // initializer              
    { {       392}, { 248} }, // designator_list          
    { {       123}, { 140} }, // '{'                      
    { {       336}, { 141} }, // assignment_expression    
    { {       393}, { 249} }, // designator               
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {        91}, { 250} }, // '['                      
    { {        46}, { 251} }, // '.'                      
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_452[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -11} }, 
};

SR__ s_453[] =
{
    { { REQ_TOKEN}, {  31} },                             
    { {       338}, { 469} }, // generic_association      
    { {       339}, { 427} }, // type_name                
    { {       312}, { 428} }, // DEFAULT                  
    { {       377}, { 122} }, // specifier_qualifier_list 
    { {       364}, { 123} }, // type_specifier           
    { {       365}, { 124} }, // type_qualifier           
    { {       304}, {  19} }, // VOID                     
    { {       296}, {  20} }, // CHAR                     
    { {       297}, {  21} }, // SHORT                    
    { {       298}, {  22} }, // INT                      
    { {       299}, {  23} }, // LONG                     
    { {       302}, {  24} }, // FLOAT                    
    { {       303}, {  25} }, // DOUBLE                   
    { {       300}, {  26} }, // SIGNED                   
    { {       301}, {  27} }, // UNSIGNED                 
    { {       295}, {  28} }, // BOOL                     
    { {       305}, {  29} }, // COMPLEX                  
    { {       306}, {  30} }, // IMAGINARY                
    { {       371}, {  31} }, // atomic_type_specifier    
    { {       372}, {  32} }, // struct_or_union_specifier
    { {       373}, {  33} }, // enum_specifier           
    { {       284}, {  34} }, // TYPEDEF_NAME             
    { {       292}, {  35} }, // CONST                    
    { {       293}, {  36} }, // RESTRICT                 
    { {       294}, {  37} }, // VOLATILE                 
    { {       325}, {  38} }, // ATOMIC                   
    { {       374}, {  42} }, // struct_or_union          
    { {       309}, {  43} }, // ENUM                     
    { {       307}, {  44} }, // STRUCT                   
    { {       308}, {  45} }, // UNION                    
    { {         0}, {   0} },                             
};

SR__ s_454[] =
{
    { { REQ_TOKEN}, {  38} },                             
    { {       336}, { 470} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_455[] =
{
    { { REQ_TOKEN}, {  38} },                             
    { {       336}, { 471} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       257}, { 112} }, // IDENTIFIER               
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_456[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        93}, { 472} }, // ']'
    { {         0}, {   0} },       
};

SR__ s_457[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -213} }, 
};

SR__ s_458[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -214} }, 
};

SR__ s_459[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        93}, { 473} }, // ']'
    { {         0}, {   0} },       
};

SR__ s_460[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -204} }, 
};

SR__ s_461[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -206} }, 
};

SR__ s_462[] =
{
    { { REQ_TOKEN}, {  59} },                             
    { {       394}, { 474} }, // statement                
    { {       395}, { 149} }, // labeled_statement        
    { {       396}, { 150} }, // compound_statement       
    { {       397}, { 151} }, // expression_statement     
    { {       398}, { 152} }, // selection_statement      
    { {       399}, { 153} }, // iteration_statement      
    { {       400}, { 154} }, // jump_statement           
    { {       257}, { 155} }, // IDENTIFIER               
    { {       311}, { 156} }, // CASE                     
    { {       312}, { 157} }, // DEFAULT                  
    { {       123}, {  72} }, // '{'                      
    { {        59}, { 158} }, // ';'                      
    { {       333}, { 159} }, // expression               
    { {       313}, { 160} }, // IF                       
    { {       315}, { 161} }, // SWITCH                   
    { {       316}, { 162} }, // WHILE                    
    { {       317}, { 163} }, // DO                       
    { {       318}, { 164} }, // FOR                      
    { {       319}, { 165} }, // GOTO                     
    { {       320}, { 166} }, // CONTINUE                 
    { {       321}, { 167} }, // BREAK                    
    { {       322}, { 168} }, // RETURN                   
    { {       336}, { 169} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_463[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 475} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_464[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -257} }, 
};

SR__ s_465[] =
{
    { { REQ_TOKEN}, {  59} },                             
    { {       394}, { 476} }, // statement                
    { {       395}, { 149} }, // labeled_statement        
    { {       396}, { 150} }, // compound_statement       
    { {       397}, { 151} }, // expression_statement     
    { {       398}, { 152} }, // selection_statement      
    { {       399}, { 153} }, // iteration_statement      
    { {       400}, { 154} }, // jump_statement           
    { {       257}, { 155} }, // IDENTIFIER               
    { {       311}, { 156} }, // CASE                     
    { {       312}, { 157} }, // DEFAULT                  
    { {       123}, {  72} }, // '{'                      
    { {        59}, { 158} }, // ';'                      
    { {       333}, { 159} }, // expression               
    { {       313}, { 160} }, // IF                       
    { {       315}, { 161} }, // SWITCH                   
    { {       316}, { 162} }, // WHILE                    
    { {       317}, { 163} }, // DO                       
    { {       318}, { 164} }, // FOR                      
    { {       319}, { 165} }, // GOTO                     
    { {       320}, { 166} }, // CONTINUE                 
    { {       321}, { 167} }, // BREAK                    
    { {       322}, { 168} }, // RETURN                   
    { {       336}, { 169} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_466[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -259} }, 
};

SR__ s_467[] =
{
    { { REQ_TOKEN}, {  59} },                             
    { {       394}, { 477} }, // statement                
    { {       395}, { 149} }, // labeled_statement        
    { {       396}, { 150} }, // compound_statement       
    { {       397}, { 151} }, // expression_statement     
    { {       398}, { 152} }, // selection_statement      
    { {       399}, { 153} }, // iteration_statement      
    { {       400}, { 154} }, // jump_statement           
    { {       257}, { 155} }, // IDENTIFIER               
    { {       311}, { 156} }, // CASE                     
    { {       312}, { 157} }, // DEFAULT                  
    { {       123}, {  72} }, // '{'                      
    { {        59}, { 158} }, // ';'                      
    { {       333}, { 159} }, // expression               
    { {       313}, { 160} }, // IF                       
    { {       315}, { 161} }, // SWITCH                   
    { {       316}, { 162} }, // WHILE                    
    { {       317}, { 163} }, // DO                       
    { {       318}, { 164} }, // FOR                      
    { {       319}, { 165} }, // GOTO                     
    { {       320}, { 166} }, // CONTINUE                 
    { {       321}, { 167} }, // BREAK                    
    { {       322}, { 168} }, // RETURN                   
    { {       336}, { 169} }, // assignment_expression    
    { {       356}, { 142} }, // conditional_expression   
    { {       343}, { 143} }, // unary_expression         
    { {       355}, {  86} }, // logical_or_expression    
    { {       340}, {  99} }, // postfix_expression       
    { {       264}, { 100} }, // INC_OP                   
    { {       265}, { 101} }, // DEC_OP                   
    { {       344}, { 102} }, // unary_operator           
    { {       262}, { 103} }, // SIZEOF                   
    { {       324}, { 104} }, // ALIGNOF                  
    { {       354}, {  87} }, // logical_and_expression   
    { {       330}, { 105} }, // primary_expression       
    { {        40}, {  98} }, // '('                      
    { {        38}, { 106} }, // '&'                      
    { {        42}, { 107} }, // '*'                      
    { {        43}, { 108} }, // '+'                      
    { {        45}, { 109} }, // '-'                      
    { {       126}, { 110} }, // '~'                      
    { {        33}, { 111} }, // '!'                      
    { {       353}, {  88} }, // inclusive_or_expression  
    { {       331}, { 113} }, // constant                 
    { {       332}, { 114} }, // string                   
    { {       334}, { 115} }, // generic_selection        
    { {       352}, {  89} }, // exclusive_or_expression  
    { {       258}, { 116} }, // I_CONSTANT               
    { {       259}, { 117} }, // F_CONSTANT               
    { {       285}, { 118} }, // ENUMERATION_CONSTANT     
    { {       260}, { 119} }, // STRING_LITERAL           
    { {       326}, { 120} }, // GENERIC                  
    { {       351}, {  90} }, // and_expression           
    { {       350}, {  91} }, // equality_expression      
    { {       349}, {  92} }, // relational_expression    
    { {       348}, {  93} }, // shift_expression         
    { {       347}, {  94} }, // additive_expression      
    { {       346}, {  95} }, // multiplicative_expression
    { {       345}, {  96} }, // cast_expression          
    { {         0}, {   0} },                             
};

SR__ s_468[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};

SR__ s_469[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR__ s_470[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR__ s_471[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR__ s_472[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -212} }, 
};

SR__ s_473[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -215} }, 
};

SR__ s_474[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -252} }, 
};

SR__ s_475[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -256} }, 
};

SR__ s_476[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -258} }, 
};

SR__ s_477[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -260} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,  s_121,  s_122,  s_123,  s_124,  s_125,  s_126,  s_127,  s_128,  s_129,
  s_130,  s_131,  s_132,  s_133,  s_134,  s_135,  s_136,  s_137,  s_138,  s_139,
  s_140,  s_141,  s_142,  s_143,  s_144,  s_145,  s_146,  s_147,  s_148,  s_149,
  s_150,  s_151,  s_152,  s_153,  s_154,  s_155,  s_156,  s_157,  s_158,  s_159,
  s_160,  s_161,  s_162,  s_163,  s_164,  s_165,  s_166,  s_167,  s_168,  s_169,
  s_170,  s_171,  s_172,  s_173,  s_174,  s_175,  s_176,  s_177,  s_178,  s_179,
  s_180,  s_181,  s_182,  s_183,  s_184,  s_185,  s_186,  s_187,  s_188,  s_189,
  s_190,  s_191,  s_192,  s_193,  s_194,  s_195,  s_196,  s_197,  s_198,  s_199,
  s_200,  s_201,  s_202,  s_203,  s_204,  s_205,  s_206,  s_207,  s_208,  s_209,
  s_210,  s_211,  s_212,  s_213,  s_214,  s_215,  s_216,  s_217,  s_218,  s_219,
  s_220,  s_221,  s_222,  s_223,  s_224,  s_225,  s_226,  s_227,  s_228,  s_229,
  s_230,  s_231,  s_232,  s_233,  s_234,  s_235,  s_236,  s_237,  s_238,  s_239,
  s_240,  s_241,  s_242,  s_243,  s_244,  s_245,  s_246,  s_247,  s_248,  s_249,
  s_250,  s_251,  s_252,  s_253,  s_254,  s_255,  s_256,  s_257,  s_258,  s_259,
  s_260,  s_261,  s_262,  s_263,  s_264,  s_265,  s_266,  s_267,  s_268,  s_269,
  s_270,  s_271,  s_272,  s_273,  s_274,  s_275,  s_276,  s_277,  s_278,  s_279,
  s_280,  s_281,  s_282,  s_283,  s_284,  s_285,  s_286,  s_287,  s_288,  s_289,
  s_290,  s_291,  s_292,  s_293,  s_294,  s_295,  s_296,  s_297,  s_298,  s_299,
  s_300,  s_301,  s_302,  s_303,  s_304,  s_305,  s_306,  s_307,  s_308,  s_309,
  s_310,  s_311,  s_312,  s_313,  s_314,  s_315,  s_316,  s_317,  s_318,  s_319,
  s_320,  s_321,  s_322,  s_323,  s_324,  s_325,  s_326,  s_327,  s_328,  s_329,
  s_330,  s_331,  s_332,  s_333,  s_334,  s_335,  s_336,  s_337,  s_338,  s_339,
  s_340,  s_341,  s_342,  s_343,  s_344,  s_345,  s_346,  s_347,  s_348,  s_349,
  s_350,  s_351,  s_352,  s_353,  s_354,  s_355,  s_356,  s_357,  s_358,  s_359,
  s_360,  s_361,  s_362,  s_363,  s_364,  s_365,  s_366,  s_367,  s_368,  s_369,
  s_370,  s_371,  s_372,  s_373,  s_374,  s_375,  s_376,  s_377,  s_378,  s_379,
  s_380,  s_381,  s_382,  s_383,  s_384,  s_385,  s_386,  s_387,  s_388,  s_389,
  s_390,  s_391,  s_392,  s_393,  s_394,  s_395,  s_396,  s_397,  s_398,  s_399,
  s_400,  s_401,  s_402,  s_403,  s_404,  s_405,  s_406,  s_407,  s_408,  s_409,
  s_410,  s_411,  s_412,  s_413,  s_414,  s_415,  s_416,  s_417,  s_418,  s_419,
  s_420,  s_421,  s_422,  s_423,  s_424,  s_425,  s_426,  s_427,  s_428,  s_429,
  s_430,  s_431,  s_432,  s_433,  s_434,  s_435,  s_436,  s_437,  s_438,  s_439,
  s_440,  s_441,  s_442,  s_443,  s_444,  s_445,  s_446,  s_447,  s_448,  s_449,
  s_450,  s_451,  s_452,  s_453,  s_454,  s_455,  s_456,  s_457,  s_458,  s_459,
  s_460,  s_461,  s_462,  s_463,  s_464,  s_465,  s_466,  s_467,  s_468,  s_469,
  s_470,  s_471,  s_472,  s_473,  s_474,  s_475,  s_476,  s_477,
};

} // anonymous namespace ends



// If the parsing function call uses arguments, then provide an overloaded
// function.  The code below doesn't rely on parameters, so no arguments are
// required.  Furthermore, parse uses a function try block to allow us to do
// ACCEPT and ABORT from anywhere, even from within members called by actions,
// simply throwing the appropriate exceptions.

ParserBase::ParserBase()
:
    d_stackIdx__(-1),
    // $insert debuginit
    d_debug__(false),
    d_nErrors__(0),
    // $insert requiredtokens
    d_requiredTokens__(0),
    d_acceptedTokens__(d_requiredTokens__),
    d_token__(_UNDETERMINED_),
    d_nextToken__(_UNDETERMINED_)
{}


void Parser::print__()
{
// $insert print
}

void ParserBase::clearin()
{
    d_token__ = d_nextToken__ = _UNDETERMINED_;
}

void ParserBase::push__(size_t state)
{
    if (static_cast<size_t>(d_stackIdx__ + 1) == d_stateStack__.size())
    {
        size_t newSize = d_stackIdx__ + STACK_EXPANSION;
        d_stateStack__.resize(newSize);
        d_valueStack__.resize(newSize);
    }
    ++d_stackIdx__;
    d_stateStack__[d_stackIdx__] = d_state__ = state;
    *(d_vsp__ = &d_valueStack__[d_stackIdx__]) = d_val__;
}

void ParserBase::popToken__()
{
    d_token__ = d_nextToken__;

    d_val__ = d_nextVal__;
    d_nextVal__ = STYPE__();

    d_nextToken__ = _UNDETERMINED_;
}
     
void ParserBase::pushToken__(int token)
{
    d_nextToken__ = d_token__;
    d_nextVal__ = d_val__;
    d_token__ = token;
}
     
void ParserBase::pop__(size_t count)
{
    if (d_stackIdx__ < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx__ -= count;
    d_state__ = d_stateStack__[d_stackIdx__];
    d_vsp__ = &d_valueStack__[d_stackIdx__];
}

inline size_t ParserBase::top__() const
{
    return d_stateStack__[d_stackIdx__];
}

void Parser::executeAction(int production)
try
{
    if (d_token__ != _UNDETERMINED_)
        pushToken__(d_token__);     // save an already available token

                                    // save default non-nested block $$
    if (int size = s_productionInfo[production].d_size)
        d_val__ = d_vsp__[1 - size];

    switch (production)
    {
        // $insert actioncases
        
        case 1:
#line 30 "grammar.y"
        {std::string i = SymbolStore::pop(); d_val__ = new Identifier(i);}
        break;

        case 2:
#line 31 "grammar.y"
        {d_val__ = d_vsp__[0];}
        break;

        case 3:
#line 32 "grammar.y"
        {d_val__ = d_vsp__[0];}
        break;

        case 4:
#line 33 "grammar.y"
        {d_val__ = new BracketedExpression(d_vsp__[-1]);}
        break;

        case 5:
#line 34 "grammar.y"
        {throw UnimplementedException("generic_selection");}
        break;

        case 6:
#line 38 "grammar.y"
        {d_val__ = new Constant(SymbolStore::pop(),I_CONSTANT);}
        break;

        case 7:
#line 39 "grammar.y"
        {d_val__ = new Constant(d_scanner.matched(),F_CONSTANT);}
        break;

        case 10:
#line 48 "grammar.y"
        {d_val__ = new String(d_scanner.matched());}
        break;

        case 16:
#line 67 "grammar.y"
        {d_val__ = (d_vsp__[0]);}
        break;

        case 17:
#line 68 "grammar.y"
        {throw UnimplementedException("Matching postfix expression");}
        break;

        case 18:
#line 69 "grammar.y"
        {d_val__ = new FunctionCall(d_vsp__[-2]);}
        break;

        case 19:
#line 70 "grammar.y"
        {d_val__ = new FunctionCall(d_vsp__[-3], d_vsp__[-1]);}
        break;

        case 21:
#line 72 "grammar.y"
        {throw UnimplementedException("Matching postfix PTR_OP");}
        break;

        case 22:
#line 73 "grammar.y"
        {throw UnimplementedException("Matching postfix INC_OP");}
        break;

        case 23:
#line 74 "grammar.y"
        {throw UnimplementedException("Matching postfix DEC_OP");}
        break;

        case 24:
#line 75 "grammar.y"
        {throw UnimplementedException("Matching postfix init list 1");}
        break;

        case 25:
#line 76 "grammar.y"
        {throw UnimplementedException("Matching postfix init list 2");}
        break;

        case 26:
#line 80 "grammar.y"
        {d_val__ = new ArgumentExpressionList(d_vsp__[0]);}
        break;

        case 27:
#line 81 "grammar.y"
        {d_val__ = d_vsp__[-2]; dynamic_cast<ArgumentExpressionList*>(d_val__)->extend(new ArgumentExpressionList(d_vsp__[0]));}
        break;

        case 28:
#line 85 "grammar.y"
        {d_val__ = new UnaryExpression(d_vsp__[0]);}
        break;

        case 29:
#line 86 "grammar.y"
        {throw UnimplementedException("unary_expression 1");}
        break;

        case 30:
#line 87 "grammar.y"
        {throw UnimplementedException("unary_expression 2");}
        break;

        case 31:
#line 88 "grammar.y"
        {throw UnimplementedException("unary_expression 3");}
        break;

        case 32:
#line 89 "grammar.y"
        {throw UnimplementedException("unary_expression 4");}
        break;

        case 33:
#line 90 "grammar.y"
        {throw UnimplementedException("unary_expression 5");}
        break;

        case 34:
#line 91 "grammar.y"
        {throw UnimplementedException("unary_expression 6");}
        break;

        case 35:
#line 95 "grammar.y"
        {d_val__ = new UnaryOperator('&');}
        break;

        case 36:
#line 96 "grammar.y"
        {d_val__ = new UnaryOperator('*');}
        break;

        case 37:
#line 97 "grammar.y"
        {d_val__ = new UnaryOperator('+');}
        break;

        case 38:
#line 98 "grammar.y"
        {d_val__ = new UnaryOperator('-');}
        break;

        case 39:
#line 99 "grammar.y"
        {d_val__ = new UnaryOperator('~');}
        break;

        case 40:
#line 100 "grammar.y"
        {d_val__ = new UnaryOperator('!');}
        break;

        case 41:
#line 104 "grammar.y"
        {d_val__ = (d_vsp__[0]);}
        break;

        case 42:
#line 105 "grammar.y"
        {throw UnimplementedException("cast_expression 1");}
        break;

        case 43:
#line 109 "grammar.y"
        {d_val__ = (d_vsp__[0]);}
        break;

        case 44:
#line 110 "grammar.y"
        {d_val__ = new MultExpression(d_vsp__[-2], '*', d_vsp__[0]);}
        break;

        case 45:
#line 111 "grammar.y"
        {d_val__ = new MultExpression(d_vsp__[-2], '/', d_vsp__[0]);}
        break;

        case 46:
#line 112 "grammar.y"
        {d_val__ = new MultExpression(d_vsp__[-2], '%', d_vsp__[0]);}
        break;

        case 47:
#line 116 "grammar.y"
        {d_val__ = (d_vsp__[0]);}
        break;

        case 48:
#line 117 "grammar.y"
        {d_val__ = new AddExpression(d_vsp__[-2], '+', d_vsp__[0]);}
        break;

        case 49:
#line 118 "grammar.y"
        {d_val__ = new AddExpression(d_vsp__[-2], '-', d_vsp__[0]);}
        break;

        case 50:
#line 122 "grammar.y"
        {d_val__ = (d_vsp__[0]);}
        break;

        case 51:
#line 123 "grammar.y"
        {d_val__ = new ShiftExpression(d_vsp__[-2], LEFT_OP, d_vsp__[0]);}
        break;

        case 52:
#line 124 "grammar.y"
        {d_val__ = new ShiftExpression(d_vsp__[-2], RIGHT_OP, d_vsp__[0]);}
        break;

        case 53:
#line 128 "grammar.y"
        {d_val__ = (d_vsp__[0]);}
        break;

        case 54:
#line 129 "grammar.y"
        {d_val__ = new RelationalExpression(d_vsp__[-2], '<', d_vsp__[0]);}
        break;

        case 55:
#line 130 "grammar.y"
        {d_val__ = new RelationalExpression(d_vsp__[-2], '>', d_vsp__[0]);}
        break;

        case 56:
#line 131 "grammar.y"
        {d_val__ = new RelationalExpression(d_vsp__[-2], LE_OP, d_vsp__[0]);}
        break;

        case 57:
#line 132 "grammar.y"
        {d_val__ = new RelationalExpression(d_vsp__[-2], GE_OP, d_vsp__[0]);}
        break;

        case 58:
#line 136 "grammar.y"
        {d_val__ = (d_vsp__[0]);}
        break;

        case 59:
#line 137 "grammar.y"
        {d_val__ = new EqualityExpression(d_vsp__[-2], EQ_OP, d_vsp__[0]);}
        break;

        case 60:
#line 138 "grammar.y"
        {d_val__ = new EqualityExpression(d_vsp__[-2], NE_OP, d_vsp__[0]);}
        break;

        case 61:
#line 142 "grammar.y"
        {d_val__ = (d_vsp__[0]);}
        break;

        case 62:
#line 143 "grammar.y"
        {d_val__ = new AndExpression(d_vsp__[-2], d_vsp__[0]);}
        break;

        case 63:
#line 147 "grammar.y"
        {d_val__ = (d_vsp__[0]);}
        break;

        case 64:
#line 148 "grammar.y"
        {d_val__ = new ExclusiveOrExpression(d_vsp__[-2], d_vsp__[0]);}
        break;

        case 65:
#line 152 "grammar.y"
        {d_val__ = (d_vsp__[0]);}
        break;

        case 66:
#line 153 "grammar.y"
        {d_val__ = new InclusiveOrExpression(d_vsp__[-2], d_vsp__[0]);}
        break;

        case 67:
#line 157 "grammar.y"
        {d_val__ = (d_vsp__[0]);}
        break;

        case 68:
#line 158 "grammar.y"
        {d_val__ = new LogicalAndExpression(d_vsp__[-2], d_vsp__[0]);}
        break;

        case 69:
#line 162 "grammar.y"
        {d_val__ = (d_vsp__[0]);}
        break;

        case 70:
#line 163 "grammar.y"
        {d_val__ = new LogicalOrExpression(d_vsp__[-2], d_vsp__[0]);}
        break;

        case 71:
#line 167 "grammar.y"
        {d_val__ = (d_vsp__[0]);}
        break;

        case 72:
#line 168 "grammar.y"
        {d_val__ = new ConditionalExpression(d_vsp__[-4], d_vsp__[-2], d_vsp__[0]);}
        break;

        case 73:
#line 172 "grammar.y"
        {d_val__ = d_vsp__[0];}
        break;

        case 74:
#line 173 "grammar.y"
        {d_val__ = new AssignmentExpression(d_vsp__[-2], d_vsp__[-1], d_vsp__[0]);}
        break;

        case 75:
#line 177 "grammar.y"
        {d_val__ = new AssignmentOperator('=');}
        break;

        case 76:
#line 178 "grammar.y"
        {throw UnimplementedException("assignment MUL");}
        break;

        case 77:
#line 179 "grammar.y"
        {throw UnimplementedException("assignment DIV");}
        break;

        case 78:
#line 180 "grammar.y"
        {throw UnimplementedException("assignment MOD");}
        break;

        case 79:
#line 181 "grammar.y"
        {throw UnimplementedException("assignment ADD");}
        break;

        case 80:
#line 182 "grammar.y"
        {throw UnimplementedException("assignment SUB");}
        break;

        case 81:
#line 183 "grammar.y"
        {throw UnimplementedException("assignment LEFT");}
        break;

        case 82:
#line 184 "grammar.y"
        {throw UnimplementedException("assignment RIGHT");}
        break;

        case 83:
#line 185 "grammar.y"
        {throw UnimplementedException("assignment AND");}
        break;

        case 84:
#line 186 "grammar.y"
        {throw UnimplementedException("assignment XOR");}
        break;

        case 85:
#line 187 "grammar.y"
        {throw UnimplementedException("assignment OR");}
        break;

        case 86:
#line 191 "grammar.y"
        {d_val__ = d_vsp__[0];}
        break;

        case 87:
#line 192 "grammar.y"
        {d_val__ = new ExpressionList(d_vsp__[-2], d_vsp__[0]);}
        break;

        case 89:
#line 200 "grammar.y"
        {throw UnimplementedException("Matched declaration spec");}
        break;

        case 90:
#line 201 "grammar.y"
        {d_val__ = new Declaration(d_vsp__[-2], d_vsp__[-1]);}
        break;

        case 91:
#line 202 "grammar.y"
        {throw UnimplementedException("Matched declaration static assert");}
        break;

        case 95:
#line 209 "grammar.y"
        {d_val__ = d_vsp__[0];}
        break;

        case 102:
#line 219 "grammar.y"
        {d_val__ = (d_vsp__[0]);}
        break;

        case 103:
#line 220 "grammar.y"
        {d_val__ = d_vsp__[-2]; (dynamic_cast<InitDeclarator*>(d_vsp__[-2]))->extend(d_vsp__[0]);}
        break;

        case 104:
#line 224 "grammar.y"
        {d_val__ = new InitDeclarator(d_vsp__[-2], d_vsp__[0]);}
        break;

        case 105:
#line 225 "grammar.y"
        {d_val__ = new InitDeclarator(d_vsp__[0]);}
        break;

        case 112:
#line 238 "grammar.y"
        {d_val__ = new TypeSpec(ParserBase::VOID);}
        break;

        case 113:
#line 239 "grammar.y"
        {throw UnimplementedException("char type");}
        break;

        case 114:
#line 240 "grammar.y"
        {throw UnimplementedException("short type");}
        break;

        case 115:
#line 241 "grammar.y"
        {d_val__ = new TypeSpec(ParserBase::INT);}
        break;

        case 116:
#line 242 "grammar.y"
        {throw UnimplementedException("long type");}
        break;

        case 117:
#line 243 "grammar.y"
        {throw UnimplementedException("float type");}
        break;

        case 118:
#line 244 "grammar.y"
        {throw UnimplementedException("double type");}
        break;

        case 119:
#line 245 "grammar.y"
        {throw UnimplementedException("signed type");}
        break;

        case 120:
#line 246 "grammar.y"
        {throw UnimplementedException("unsigned type");}
        break;

        case 121:
#line 247 "grammar.y"
        {throw UnimplementedException("bool type");}
        break;

        case 122:
#line 248 "grammar.y"
        {throw UnimplementedException("complex type");}
        break;

        case 165:
#line 336 "grammar.y"
        {d_val__ = new Declarator(d_vsp__[-1], d_vsp__[0]);}
        break;

        case 166:
#line 337 "grammar.y"
        {d_val__ = new Declarator(d_vsp__[0]);}
        break;

        case 167:
#line 341 "grammar.y"
        {d_val__ = new DirectDeclaratorBase(d_scanner.matched());}
        break;

        case 168:
#line 342 "grammar.y"
        {throw UnimplementedException("Matching ( declarator )");}
        break;

        case 169:
#line 343 "grammar.y"
        {throw UnimplementedException("Matching declarator [ ]");}
        break;

        case 170:
#line 344 "grammar.y"
        {throw UnimplementedException("Matching declarator [ * ]");}
        break;

        case 178:
#line 352 "grammar.y"
        {d_val__ = new DirectDeclaratorFunc(d_vsp__[-3], d_vsp__[-1]);}
        break;

        case 179:
#line 353 "grammar.y"
        {d_val__ = new DirectDeclaratorFunc(d_vsp__[-2]);}
        break;

        case 180:
#line 354 "grammar.y"
        {throw UnimplementedException("Matching declarator ( identifier list )");}
        break;

        case 187:
#line 371 "grammar.y"
        {throw UnimplementedException("Matching parameter type list with ellipsis");}
        break;

        case 189:
#line 376 "grammar.y"
        {d_val__ = new ParameterList(d_vsp__[0]);}
        break;

        case 190:
#line 377 "grammar.y"
        {d_val__ = new ParameterList(d_vsp__[-2], d_vsp__[0]);}
        break;

        case 191:
#line 381 "grammar.y"
        {d_val__ = new ParameterDecl(d_vsp__[-1], d_vsp__[0]);}
        break;

        case 192:
#line 382 "grammar.y"
        {throw UnimplementedException("Matching paramdecl 1");}
        break;

        case 193:
#line 383 "grammar.y"
        {throw UnimplementedException("Matching paramdecl 2");}
        break;

        case 198:
#line 397 "grammar.y"
        {throw UnimplementedException("Pointers are not supported 1");}
        break;

        case 199:
#line 398 "grammar.y"
        {throw UnimplementedException("Pointers are not supported 2");}
        break;

        case 222:
#line 427 "grammar.y"
        {throw UnimplementedException("Initializer list");}
        break;

        case 223:
#line 428 "grammar.y"
        {throw UnimplementedException("Initializer list with comma");}
        break;

        case 224:
#line 429 "grammar.y"
        {d_val__ = d_vsp__[0];}
        break;

        case 229:
#line 440 "grammar.y"
        {throw UnimplementedException("Designator list");}
        break;

        case 244:
#line 473 "grammar.y"
        {d_val__ = new CompoundStatement();}
        break;

        case 245:
#line 474 "grammar.y"
        {d_val__ = new CompoundStatement(d_vsp__[-1]);}
        break;

        case 246:
#line 478 "grammar.y"
        {d_val__ = (d_vsp__[0]);}
        break;

        case 247:
#line 479 "grammar.y"
        {d_val__ = (d_vsp__[-1]); dynamic_cast<BlockItem*>(d_vsp__[-1])->extend(d_vsp__[0]);}
        break;

        case 248:
#line 483 "grammar.y"
        {d_val__ = new BlockItem(d_vsp__[0]);}
        break;

        case 249:
#line 484 "grammar.y"
        {d_val__ = new BlockItem(d_vsp__[0]);}
        break;

        case 250:
#line 488 "grammar.y"
        {d_val__ = new ExpressionStatement();}
        break;

        case 251:
#line 489 "grammar.y"
        {d_val__ = new ExpressionStatement(d_vsp__[-1]);}
        break;

        case 252:
#line 493 "grammar.y"
        {d_val__ = new IfStatement(d_vsp__[-4], d_vsp__[-2], d_vsp__[0]);}
        break;

        case 253:
#line 494 "grammar.y"
        {d_val__ = new IfStatement(d_vsp__[-2], d_vsp__[0]);}
        break;

        case 255:
#line 499 "grammar.y"
        {d_val__ = new WhileLoop(d_vsp__[-2], d_vsp__[0]);}
        break;

        case 256:
#line 500 "grammar.y"
        {throw UnimplementedException("Do While");}
        break;

        case 257:
#line 501 "grammar.y"
        {d_val__ = new ForLoop(d_vsp__[-3], d_vsp__[-2], d_vsp__[-1], d_vsp__[0]);}
        break;

        case 258:
#line 502 "grammar.y"
        {d_val__ = new ForLoop(d_vsp__[-4], d_vsp__[-3], d_vsp__[-2], d_vsp__[0]);}
        break;

        case 259:
#line 503 "grammar.y"
        {d_val__ = new ForLoop(d_vsp__[-3], d_vsp__[-2], d_vsp__[-1], d_vsp__[0]);}
        break;

        case 260:
#line 504 "grammar.y"
        {d_val__ = new ForLoop(d_vsp__[-4], d_vsp__[-3], d_vsp__[-2], d_vsp__[0]);}
        break;

        case 262:
#line 509 "grammar.y"
        {d_val__ = new LoopFlowControl(0);}
        break;

        case 263:
#line 510 "grammar.y"
        {d_val__ = new LoopFlowControl(1);}
        break;

        case 264:
#line 511 "grammar.y"
        {d_val__ = new ReturnType(); }
        break;

        case 265:
#line 512 "grammar.y"
        {d_val__ = new ReturnType(d_vsp__[-1]); }
        break;

        case 266:
#line 516 "grammar.y"
        {TranslationUnit* tu = new TranslationUnit(d_vsp__[0]); d_val__ = tu; TopBranch::set(tu);}
        break;

        case 267:
#line 517 "grammar.y"
        {d_val__ = d_vsp__[-1]; dynamic_cast<TranslationUnit*>(d_val__)->extend(new TranslationUnit(d_vsp__[0]));}
        break;

        case 268:
#line 521 "grammar.y"
        {d_val__ = d_vsp__[0];}
        break;

        case 269:
#line 522 "grammar.y"
        {d_val__ = d_vsp__[0];}
        break;

        case 270:
#line 526 "grammar.y"
        {throw UnimplementedException("type of function");}
        break;

        case 271:
#line 527 "grammar.y"
        {d_val__ = new FuncDef(d_vsp__[-2], d_vsp__[-1], d_vsp__[0]);}
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler__(exc);
}

inline void ParserBase::reduce__(PI__ const &pi)
{
    d_token__ = pi.d_nonTerm;
    pop__(pi.d_size);

}

// If d_token__ is _UNDETERMINED_ then if d_nextToken__ is _UNDETERMINED_ another
// token is obtained from lex(). Then d_nextToken__ is assigned to d_token__.
void Parser::nextToken()
{
    if (d_token__ != _UNDETERMINED_)        // no need for a token: got one
        return;                             // already

    if (d_nextToken__ != _UNDETERMINED_)
    {
        popToken__();                       // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;               // accept another token (see
                                            // errorRecover())
        d_token__ = lex();
        if (d_token__ <= 0)
            d_token__ = _EOF_;
    }
    print();
}

// if the final transition is negative, then we should reduce by the rule
// given by its positive value. Note that the `recovery' parameter is only
// used with the --debug option
int Parser::lookup(bool recovery)
{
    // $insert threading
    SR__ *sr = s_state[d_state__];        // get the appropriate state-table
    int lastIdx = sr->d_lastIdx;        // sentinel-index in the SR__ array

    SR__ *lastElementPtr = sr + lastIdx;
    SR__ *elementPtr = sr + 1;            // start the search at s_xx[1]

    lastElementPtr->d_token = d_token__;// set search-token

    while (elementPtr->d_token != d_token__)
        ++elementPtr;

    if (elementPtr == lastElementPtr)   // reached the last element
    {
        if (elementPtr->d_action < 0)   // default reduction
        {
            return elementPtr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = elementPtr->d_action;


    return action;
}

    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)
void Parser::errorRecovery()
try
{
    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error("Syntax error");                  // simply skip input

    }


    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, lookup a token allowing us to proceed.
    // Continuation may be possible following multiple reductions,
    // but eventuall a shift will be used, requiring the retrieval of
    // a terminal token. If a retrieved token doesn't match, the catch below 
    // will ensure the next token is requested in the while(true) block
    // implemented below:

    int lastToken = d_token__;                  // give the unexpected token a
                                                // chance to be processed
                                                // again.

    pushToken__(_error_);                       // specify _error_ as next token
    push__(lookup(true));                       // push the error state

    d_token__ = lastToken;                      // reactivate the unexpected
                                                // token (we're now in an
                                                // ERROR state).

    bool gotToken = true;                       // the next token is a terminal

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
            {
                gotToken = d_token__ == _UNDETERMINED_;
                nextToken();                    // obtain next token
            }
            
            int action = lookup(true);

            if (action > 0)                 // push a new state
            {
                push__(action);
                popToken__();

                if (gotToken)
                {

                    d_acceptedTokens__ = 0;
                    return;
                }
            }
            else if (action < 0)
            {
                // no actions executed on recovery but save an already 
                // available token:
                if (d_token__ != _UNDETERMINED_)
                    pushToken__(d_token__);
 
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else
                ABORT();                    // abort when accepting during
                                            // error recovery
        }
        catch (...)
        {
            if (d_token__ == _EOF_)
                ABORT();                    // saw inappropriate _EOF_
                      
            popToken__();                   // failing token now skipped
        }
    }
}
catch (ErrorRecovery__)       // This is: DEFAULT_RECOVERY_MODE
{
    ABORT();
}

    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and d_token__ as well as
    // d_nextToken__ are initialized to _UNDETERMINED_. 
    //
    // Then, in an eternal loop:
    //
    //  1. If a state does not have REQ_TOKEN no token is assigned to
    //     d_token__. If the state has REQ_TOKEN, nextToken() is called to
    //      determine d_nextToken__ and d_token__ is set to
    //     d_nextToken__. nextToken() will not call lex() unless d_nextToken__ is 
    //     _UNDETERMINED_. 
    //
    //  2. lookup() is called: 
    //     d_token__ is stored in the final element's d_token field of the
    //     state's SR_ array. 
    //
    //  3. The current token is looked up in the state's SR_ array
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token__ is not found, and the state has no
    //     default reduction. Error handling was described at the top of this
    //     file.

int Parser::parse()
try 
{
    push__(0);                              // initial state
    clearin();                              // clear the tokens.

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
                nextToken();                // obtain next token


            int action = lookup(false);     // lookup d_token__ in d_state__

            if (action > 0)                 // SHIFT: push a new state
            {
                push__(action);
                popToken__();               // token processed
            }
            else if (action < 0)            // REDUCE: execute and pop.
            {
                executeAction(-action);
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else 
                ACCEPT();
        }
        catch (ErrorRecovery__)
        {
            errorRecovery();
        }
    }
}
catch (Return__ retValue)
{
    return retValue;
}




